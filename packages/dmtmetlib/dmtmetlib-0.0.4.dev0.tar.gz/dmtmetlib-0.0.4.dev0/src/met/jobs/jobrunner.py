# This an autogenerated file
# 
# Generated with JobRunner
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.jobrunner import JobRunnerBlueprint
from typing import Dict
from met.jobs.jobresult import JobResult

class JobRunner(Entity):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    lat : float
         (default 0.0)
    lon : float
         (default 0.0)
    fromDate : str
         (default "")
    toDate : str
         (default "")
    result : JobResult
    """

    def __init__(self , name="", description="", lat=0.0, lon=0.0, fromDate="", toDate="", **kwargs):
        super().__init__(**kwargs)
        self.name = name
        self.description = description
        self.lat = lat
        self.lon = lon
        self.fromDate = fromDate
        self.toDate = toDate
        self.result = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return JobRunnerBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def lat(self) -> float:
        """"""
        return self.__lat

    @lat.setter
    def lat(self, value: float):
        """Set lat"""
        self.__lat = float(value)

    @property
    def lon(self) -> float:
        """"""
        return self.__lon

    @lon.setter
    def lon(self, value: float):
        """Set lon"""
        self.__lon = float(value)

    @property
    def fromDate(self) -> str:
        """"""
        return self.__fromDate

    @fromDate.setter
    def fromDate(self, value: str):
        """Set fromDate"""
        self.__fromDate = str(value)

    @property
    def toDate(self) -> str:
        """"""
        return self.__toDate

    @toDate.setter
    def toDate(self, value: str):
        """Set toDate"""
        self.__toDate = str(value)

    @property
    def result(self) -> JobResult:
        """"""
        return self.__result

    @result.setter
    def result(self, value: JobResult):
        """Set result"""
        self.__result = value
