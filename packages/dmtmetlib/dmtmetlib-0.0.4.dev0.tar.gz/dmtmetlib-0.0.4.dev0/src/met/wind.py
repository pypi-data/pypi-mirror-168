# This an autogenerated file
# 
# Generated with Wind
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.wind import WindBlueprint
from typing import Dict
from met.metvariable import MetVariable
from met.observations import Observations

class Wind(Observations):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    Conventions : str
         (default "")
    NCO : str
         (default "")
    buoy_manufacturer : str
         (default "")
    buoy_serialno : str
         (default "")
    buoy_type : str
         (default "")
    data_collecting_contractor : str
         (default "")
    data_owner : str
         (default "")
    date_created : str
         (default "")
    featureType : str
         (default "")
    geospatial_lat_max : float
         (default 0.0)
    geospatial_lat_min : float
         (default 0.0)
    geospatial_lon_max : float
         (default 0.0)
    geospatial_lon_min : float
         (default 0.0)
    geospatial_vertical_positive : str
         (default "")
    history : str
         (default "")
    keywords : str
         (default "")
    keywords_vocabulary : str
         (default "")
    latitude : MetVariable
    licence : str
         (default "")
    longitude : MetVariable
    measurement_update_period : str
         (default "")
    modified : str
         (default "")
    netcdf_version : str
         (default "")
    position_ref : str
         (default "")
    processing_level : str
         (default "")
    publisher_email : str
         (default "")
    publisher_name : str
         (default "")
    publisher_url : str
         (default "")
    sensor_level : str
         (default "")
    sensor_manufacturer : str
         (default "")
    sensor_serialno : str
         (default "")
    sensor_type : str
         (default "")
    station_name : str
         (default "")
    status : str
         (default "")
    summary : str
         (default "")
    time : MetVariable
    time_coverage_end : str
         (default "")
    time_coverage_start : str
         (default "")
    title : str
         (default "")
    url : str
         (default "")
    water_depth : str
         (default "")
    WindDirection : MetVariable
    WindGust : MetVariable
    WindSpeed : MetVariable
    """

    def __init__(self , name="", description="", Conventions="", NCO="", buoy_manufacturer="", buoy_serialno="", buoy_type="", data_collecting_contractor="", data_owner="", date_created="", featureType="", geospatial_lat_max=0.0, geospatial_lat_min=0.0, geospatial_lon_max=0.0, geospatial_lon_min=0.0, geospatial_vertical_positive="", history="", keywords="", keywords_vocabulary="", licence="", measurement_update_period="", modified="", netcdf_version="", position_ref="", processing_level="", publisher_email="", publisher_name="", publisher_url="", sensor_level="", sensor_manufacturer="", sensor_serialno="", sensor_type="", station_name="", status="", summary="", time_coverage_end="", time_coverage_start="", title="", url="", water_depth="", **kwargs):
        super().__init__(**kwargs)
        self.name = name
        self.description = description
        self.Conventions = Conventions
        self.NCO = NCO
        self.buoy_manufacturer = buoy_manufacturer
        self.buoy_serialno = buoy_serialno
        self.buoy_type = buoy_type
        self.data_collecting_contractor = data_collecting_contractor
        self.data_owner = data_owner
        self.date_created = date_created
        self.featureType = featureType
        self.geospatial_lat_max = geospatial_lat_max
        self.geospatial_lat_min = geospatial_lat_min
        self.geospatial_lon_max = geospatial_lon_max
        self.geospatial_lon_min = geospatial_lon_min
        self.geospatial_vertical_positive = geospatial_vertical_positive
        self.history = history
        self.keywords = keywords
        self.keywords_vocabulary = keywords_vocabulary
        self.latitude = None
        self.licence = licence
        self.longitude = None
        self.measurement_update_period = measurement_update_period
        self.modified = modified
        self.netcdf_version = netcdf_version
        self.position_ref = position_ref
        self.processing_level = processing_level
        self.publisher_email = publisher_email
        self.publisher_name = publisher_name
        self.publisher_url = publisher_url
        self.sensor_level = sensor_level
        self.sensor_manufacturer = sensor_manufacturer
        self.sensor_serialno = sensor_serialno
        self.sensor_type = sensor_type
        self.station_name = station_name
        self.status = status
        self.summary = summary
        self.time = None
        self.time_coverage_end = time_coverage_end
        self.time_coverage_start = time_coverage_start
        self.title = title
        self.url = url
        self.water_depth = water_depth
        self.WindDirection = None
        self.WindGust = None
        self.WindSpeed = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return WindBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def Conventions(self) -> str:
        """"""
        return self.__Conventions

    @Conventions.setter
    def Conventions(self, value: str):
        """Set Conventions"""
        self.__Conventions = str(value)

    @property
    def NCO(self) -> str:
        """"""
        return self.__NCO

    @NCO.setter
    def NCO(self, value: str):
        """Set NCO"""
        self.__NCO = str(value)

    @property
    def buoy_manufacturer(self) -> str:
        """"""
        return self.__buoy_manufacturer

    @buoy_manufacturer.setter
    def buoy_manufacturer(self, value: str):
        """Set buoy_manufacturer"""
        self.__buoy_manufacturer = str(value)

    @property
    def buoy_serialno(self) -> str:
        """"""
        return self.__buoy_serialno

    @buoy_serialno.setter
    def buoy_serialno(self, value: str):
        """Set buoy_serialno"""
        self.__buoy_serialno = str(value)

    @property
    def buoy_type(self) -> str:
        """"""
        return self.__buoy_type

    @buoy_type.setter
    def buoy_type(self, value: str):
        """Set buoy_type"""
        self.__buoy_type = str(value)

    @property
    def data_collecting_contractor(self) -> str:
        """"""
        return self.__data_collecting_contractor

    @data_collecting_contractor.setter
    def data_collecting_contractor(self, value: str):
        """Set data_collecting_contractor"""
        self.__data_collecting_contractor = str(value)

    @property
    def data_owner(self) -> str:
        """"""
        return self.__data_owner

    @data_owner.setter
    def data_owner(self, value: str):
        """Set data_owner"""
        self.__data_owner = str(value)

    @property
    def date_created(self) -> str:
        """"""
        return self.__date_created

    @date_created.setter
    def date_created(self, value: str):
        """Set date_created"""
        self.__date_created = str(value)

    @property
    def featureType(self) -> str:
        """"""
        return self.__featureType

    @featureType.setter
    def featureType(self, value: str):
        """Set featureType"""
        self.__featureType = str(value)

    @property
    def geospatial_lat_max(self) -> float:
        """"""
        return self.__geospatial_lat_max

    @geospatial_lat_max.setter
    def geospatial_lat_max(self, value: float):
        """Set geospatial_lat_max"""
        self.__geospatial_lat_max = float(value)

    @property
    def geospatial_lat_min(self) -> float:
        """"""
        return self.__geospatial_lat_min

    @geospatial_lat_min.setter
    def geospatial_lat_min(self, value: float):
        """Set geospatial_lat_min"""
        self.__geospatial_lat_min = float(value)

    @property
    def geospatial_lon_max(self) -> float:
        """"""
        return self.__geospatial_lon_max

    @geospatial_lon_max.setter
    def geospatial_lon_max(self, value: float):
        """Set geospatial_lon_max"""
        self.__geospatial_lon_max = float(value)

    @property
    def geospatial_lon_min(self) -> float:
        """"""
        return self.__geospatial_lon_min

    @geospatial_lon_min.setter
    def geospatial_lon_min(self, value: float):
        """Set geospatial_lon_min"""
        self.__geospatial_lon_min = float(value)

    @property
    def geospatial_vertical_positive(self) -> str:
        """"""
        return self.__geospatial_vertical_positive

    @geospatial_vertical_positive.setter
    def geospatial_vertical_positive(self, value: str):
        """Set geospatial_vertical_positive"""
        self.__geospatial_vertical_positive = str(value)

    @property
    def history(self) -> str:
        """"""
        return self.__history

    @history.setter
    def history(self, value: str):
        """Set history"""
        self.__history = str(value)

    @property
    def keywords(self) -> str:
        """"""
        return self.__keywords

    @keywords.setter
    def keywords(self, value: str):
        """Set keywords"""
        self.__keywords = str(value)

    @property
    def keywords_vocabulary(self) -> str:
        """"""
        return self.__keywords_vocabulary

    @keywords_vocabulary.setter
    def keywords_vocabulary(self, value: str):
        """Set keywords_vocabulary"""
        self.__keywords_vocabulary = str(value)

    @property
    def latitude(self) -> MetVariable:
        """"""
        return self.__latitude

    @latitude.setter
    def latitude(self, value: MetVariable):
        """Set latitude"""
        self.__latitude = value

    @property
    def licence(self) -> str:
        """"""
        return self.__licence

    @licence.setter
    def licence(self, value: str):
        """Set licence"""
        self.__licence = str(value)

    @property
    def longitude(self) -> MetVariable:
        """"""
        return self.__longitude

    @longitude.setter
    def longitude(self, value: MetVariable):
        """Set longitude"""
        self.__longitude = value

    @property
    def measurement_update_period(self) -> str:
        """"""
        return self.__measurement_update_period

    @measurement_update_period.setter
    def measurement_update_period(self, value: str):
        """Set measurement_update_period"""
        self.__measurement_update_period = str(value)

    @property
    def modified(self) -> str:
        """"""
        return self.__modified

    @modified.setter
    def modified(self, value: str):
        """Set modified"""
        self.__modified = str(value)

    @property
    def netcdf_version(self) -> str:
        """"""
        return self.__netcdf_version

    @netcdf_version.setter
    def netcdf_version(self, value: str):
        """Set netcdf_version"""
        self.__netcdf_version = str(value)

    @property
    def position_ref(self) -> str:
        """"""
        return self.__position_ref

    @position_ref.setter
    def position_ref(self, value: str):
        """Set position_ref"""
        self.__position_ref = str(value)

    @property
    def processing_level(self) -> str:
        """"""
        return self.__processing_level

    @processing_level.setter
    def processing_level(self, value: str):
        """Set processing_level"""
        self.__processing_level = str(value)

    @property
    def publisher_email(self) -> str:
        """"""
        return self.__publisher_email

    @publisher_email.setter
    def publisher_email(self, value: str):
        """Set publisher_email"""
        self.__publisher_email = str(value)

    @property
    def publisher_name(self) -> str:
        """"""
        return self.__publisher_name

    @publisher_name.setter
    def publisher_name(self, value: str):
        """Set publisher_name"""
        self.__publisher_name = str(value)

    @property
    def publisher_url(self) -> str:
        """"""
        return self.__publisher_url

    @publisher_url.setter
    def publisher_url(self, value: str):
        """Set publisher_url"""
        self.__publisher_url = str(value)

    @property
    def sensor_level(self) -> str:
        """"""
        return self.__sensor_level

    @sensor_level.setter
    def sensor_level(self, value: str):
        """Set sensor_level"""
        self.__sensor_level = str(value)

    @property
    def sensor_manufacturer(self) -> str:
        """"""
        return self.__sensor_manufacturer

    @sensor_manufacturer.setter
    def sensor_manufacturer(self, value: str):
        """Set sensor_manufacturer"""
        self.__sensor_manufacturer = str(value)

    @property
    def sensor_serialno(self) -> str:
        """"""
        return self.__sensor_serialno

    @sensor_serialno.setter
    def sensor_serialno(self, value: str):
        """Set sensor_serialno"""
        self.__sensor_serialno = str(value)

    @property
    def sensor_type(self) -> str:
        """"""
        return self.__sensor_type

    @sensor_type.setter
    def sensor_type(self, value: str):
        """Set sensor_type"""
        self.__sensor_type = str(value)

    @property
    def station_name(self) -> str:
        """"""
        return self.__station_name

    @station_name.setter
    def station_name(self, value: str):
        """Set station_name"""
        self.__station_name = str(value)

    @property
    def status(self) -> str:
        """"""
        return self.__status

    @status.setter
    def status(self, value: str):
        """Set status"""
        self.__status = str(value)

    @property
    def summary(self) -> str:
        """"""
        return self.__summary

    @summary.setter
    def summary(self, value: str):
        """Set summary"""
        self.__summary = str(value)

    @property
    def time(self) -> MetVariable:
        """"""
        return self.__time

    @time.setter
    def time(self, value: MetVariable):
        """Set time"""
        self.__time = value

    @property
    def time_coverage_end(self) -> str:
        """"""
        return self.__time_coverage_end

    @time_coverage_end.setter
    def time_coverage_end(self, value: str):
        """Set time_coverage_end"""
        self.__time_coverage_end = str(value)

    @property
    def time_coverage_start(self) -> str:
        """"""
        return self.__time_coverage_start

    @time_coverage_start.setter
    def time_coverage_start(self, value: str):
        """Set time_coverage_start"""
        self.__time_coverage_start = str(value)

    @property
    def title(self) -> str:
        """"""
        return self.__title

    @title.setter
    def title(self, value: str):
        """Set title"""
        self.__title = str(value)

    @property
    def url(self) -> str:
        """"""
        return self.__url

    @url.setter
    def url(self, value: str):
        """Set url"""
        self.__url = str(value)

    @property
    def water_depth(self) -> str:
        """"""
        return self.__water_depth

    @water_depth.setter
    def water_depth(self, value: str):
        """Set water_depth"""
        self.__water_depth = str(value)

    @property
    def WindDirection(self) -> MetVariable:
        """"""
        return self.__WindDirection

    @WindDirection.setter
    def WindDirection(self, value: MetVariable):
        """Set WindDirection"""
        self.__WindDirection = value

    @property
    def WindGust(self) -> MetVariable:
        """"""
        return self.__WindGust

    @WindGust.setter
    def WindGust(self, value: MetVariable):
        """Set WindGust"""
        self.__WindGust = value

    @property
    def WindSpeed(self) -> MetVariable:
        """"""
        return self.__WindSpeed

    @WindSpeed.setter
    def WindSpeed(self, value: MetVariable):
        """Set WindSpeed"""
        self.__WindSpeed = value
