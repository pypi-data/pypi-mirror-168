# This an autogenerated file
# 
# Generated with FieldPoint
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.fieldpoint import FieldPointBlueprint
from typing import Dict

class FieldPoint(Entity):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    latitude : float
         (default 0.0)
    longitude : float
         (default 0.0)
    """

    def __init__(self , name="", description="", latitude=0.0, longitude=0.0, **kwargs):
        super().__init__(**kwargs)
        self.name = name
        self.description = description
        self.latitude = latitude
        self.longitude = longitude
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return FieldPointBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def latitude(self) -> float:
        """"""
        return self.__latitude

    @latitude.setter
    def latitude(self, value: float):
        """Set latitude"""
        self.__latitude = float(value)

    @property
    def longitude(self) -> float:
        """"""
        return self.__longitude

    @longitude.setter
    def longitude(self, value: float):
        """Set longitude"""
        self.__longitude = float(value)
