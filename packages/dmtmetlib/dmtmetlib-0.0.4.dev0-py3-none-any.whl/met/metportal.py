# This an autogenerated file
# Application entry
# Generated with MetPortal
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.metportal import MetPortalBlueprint
from typing import Dict
from met.jobs.job import Job

class MetPortal(Entity):
    """
    Application entry
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    jobs : List[Job]
    """

    def __init__(self , name="", description="", **kwargs):
        super().__init__(**kwargs)
        self.name = name
        self.description = description
        self.jobs = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return MetPortalBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def jobs(self) -> List[Job]:
        """"""
        return self.__jobs

    @jobs.setter
    def jobs(self, value: List[Job]):
        """Set jobs"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__jobs = value
