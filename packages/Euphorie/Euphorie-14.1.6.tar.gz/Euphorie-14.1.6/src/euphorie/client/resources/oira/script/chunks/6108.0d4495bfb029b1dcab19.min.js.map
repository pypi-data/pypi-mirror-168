{"version":3,"file":"chunks/6108.0d4495bfb029b1dcab19.min.js","mappings":"8PAMA,IAAIA,EAkHG,SAASC,GAAK,IAAEC,EAAG,OAAEC,IAExBA,EAAOC,iBAAiB,mBAAmB,IAlH/C,UAAqB,IAAEF,IACnB,MAAMG,EAAcC,SAASC,cAAcL,EAAIM,QAAQC,YACvD,IAAKJ,EAED,YADA,UAAS,0BAGb,IAAAK,eAAcL,GAEd,MAAMM,EAAS,KACX,MAAMC,EAAYP,EAAYE,cAAc,qBACtCM,EAAYR,EAAYE,cAAc,qBACtCO,EAAcT,EAAYE,cAAc,uBACxCQ,EAAgBV,EAAYE,cAAc,yBAC1CS,EAAgBX,EAAYE,cAAc,0CAE1CU,EAAmBC,IAErB,MAAMC,EAAqBd,EAAYE,cACnC,iSAOEa,EAAMlB,EAAImB,OAAOC,QACvBF,EAAIG,cAAc,CACdC,KAAM,SACNC,QAAS,CACL,CACID,KAAM,eACNE,MAAO,CACHC,IAAKR,EAAmBS,SACpBf,GAAWe,OAAS,CAAEC,IAAKhB,GAAWe,UACtCd,GAAac,OAAS,CAAEE,MAAOhB,GAAac,YAIpDb,GAAea,MACb,CACI,CACIJ,KAAM,aACNC,QAAS,CACL,CACID,KAAM,OACNO,KAAMhB,EAAca,UAKpC,OAGI,IAAdV,GAGAE,EAAIY,QAERZ,EAAIa,OAIJjB,EAEA,uBACIA,EACA,QACA,wBACA,IAAMC,GAAgB,MAI1B,uBACIL,EACA,SACA,mBACAK,GAEJ,uBACIJ,EACA,SACA,mBACAI,GAEJ,uBACIH,EACA,SACA,qBACAG,GAEJ,uBACIF,EACA,SACA,uBACAE,KAKZN,IACIX,GACAA,EAAekC,aAEnBlC,EAAiB,IAAImC,iBAAiBxB,GACtCX,EAAeoC,QAAQ/B,EAAa,CAChCgC,WAAW,EACXC,SAAS,EACTC,YAAY,EACZC,eAAe,IAM8BnC,CAAY,CAAEH,IAAKA,MAGjE,MAAMuC,EAAU,IACZ,EAAAC,KAAA,OAAY,CACfC,KAAM,eAENC,WAAU,KACC,CACHC,eAAgB,KAIxBC,cAAa,KACF,CACHnB,IAAK,CACDoB,QAAS,MAEblB,IAAK,CACDkB,QAAS,MAEbjB,MAAO,CACHiB,QAAS,QAKrBC,MAAO,QACPC,QAAQ,EAERC,gBAAgB,EAChBC,MAAM,EACNC,WAAW,EACXC,WAAW,EACXC,YAAY,EAEZC,UAAS,IACE,CACH,CACIC,IAAK,MACLC,SAAWC,GAAoC,OAA3BA,EAAKC,QAAQ,WAAsB,OAKnEC,YAAW,eAAEf,IACT,MAAO,CAAC,OAAO,IAAAgB,iBAAgBC,KAAKtD,QAAQqC,eAAgBA,KAGhEkB,sBAAqB,IACV,CACH,IAAI,KAAO,CACPC,MAAO,CACHC,gBAAiB,CACbC,UAAW,CAACC,EAAMC,KAEdA,EAAMC,kBACC,W,gIChLhC,MAAMC,EAAU,GAEhB,SAAS5D,EAAc6D,GAG1BA,EAAGC,aAAa,WAAY,MAC5B,uBACID,EACA,QACA,kBACAE,UACI,YAAc,GACdH,EAAQI,KAAKC,GAAOA,GAAIC,UAAUC,IAAI,qBAE1C,GAEJ,uBACIN,EACA,OACA,mBACA,KACID,EAAQI,KAAKC,GAAOA,GAAIC,UAAUE,OAAO,qBAE7C","sources":["webpack://oira.prototype/./node_modules/@patternslib/pat-tiptap/src/extensions/image-figure.js","webpack://oira.prototype/./node_modules/@patternslib/pat-tiptap/src/focus-handler.js"],"sourcesContent":["import { focus_handler } from \"../focus-handler\";\nimport log from \"../tiptap\";\nimport { Node, mergeAttributes } from \"@tiptap/core\";\nimport { Plugin } from \"prosemirror-state\";\nimport events from \"@patternslib/patternslib/src/core/events\";\n\nlet panel_observer;\n\nfunction image_panel({ app }) {\n    const image_panel = document.querySelector(app.options.imagePanel);\n    if (!image_panel) {\n        log.warn(\"No image panel found.\");\n        return;\n    }\n    focus_handler(image_panel);\n\n    const reinit = () => {\n        const image_src = image_panel.querySelector(\"[name=tiptap-src]\");\n        const image_alt = image_panel.querySelector(\"[name=tiptap-alt]\");\n        const image_title = image_panel.querySelector(\"[name=tiptap-title]\");\n        const image_caption = image_panel.querySelector(\"[name=tiptap-caption]\");\n        const image_confirm = image_panel.querySelector(\".tiptap-confirm, [name=tiptap-confirm]\"); // prettier-ignore\n\n        const update_callback = (set_focus) => {\n            // Get the selected image on time of submitting\n            const selected_image_src = image_panel.querySelector(\n                `[name=tiptap-src][type=radio]:checked,\n                         [name=tiptap-src][type=checkbox]:checked,\n                         [name=tiptap-src][type=option]:checked,\n                         [name=tiptap-src][type=hidden],\n                         [name=tiptap-src][type=text]`\n            );\n\n            const cmd = app.editor.chain();\n            cmd.insertContent({\n                type: \"figure\",\n                content: [\n                    {\n                        type: \"image-figure\",\n                        attrs: {\n                            src: selected_image_src.value,\n                            ...(image_alt?.value && { alt: image_alt?.value }),\n                            ...(image_title?.value && { title: image_title?.value }),\n                        },\n                    },\n                    // Conditionally add a figcaption\n                    ...(image_caption?.value\n                        ? [\n                              {\n                                  type: \"figcaption\",\n                                  content: [\n                                      {\n                                          type: \"text\",\n                                          text: image_caption.value,\n                                      },\n                                  ],\n                              },\n                          ]\n                        : []),\n                ],\n            });\n            if (set_focus === true) {\n                // set focus after setting image, otherwise image is\n                // selected and right away deleted when starting typing.\n                cmd.focus();\n            }\n            cmd.run();\n        };\n\n        // FORM UPDATE\n        if (image_confirm) {\n            // update on click on confirm\n            events.add_event_listener(\n                image_confirm,\n                \"click\",\n                \"tiptap_image_confirm\",\n                () => update_callback(true)\n            );\n        } else {\n            // update on input/change\n            events.add_event_listener(\n                image_src,\n                \"change\",\n                \"tiptap_image_src\",\n                update_callback\n            );\n            events.add_event_listener(\n                image_alt,\n                \"change\",\n                \"tiptap_image_alt\",\n                update_callback\n            );\n            events.add_event_listener(\n                image_title,\n                \"change\",\n                \"tiptap_image_title\",\n                update_callback\n            );\n            events.add_event_listener(\n                image_caption,\n                \"change\",\n                \"tiptap_image_caption\",\n                update_callback\n            );\n        }\n    };\n\n    reinit();\n    if (panel_observer) {\n        panel_observer.disconnect();\n    }\n    panel_observer = new MutationObserver(reinit);\n    panel_observer.observe(image_panel, {\n        childList: true,\n        subtree: true,\n        attributes: false,\n        characterData: false,\n    });\n}\n\nexport function init({ app, button }) {\n    // Initialize modal after it has injected.\n    button.addEventListener(\"pat-modal-ready\", () => image_panel({ app: app }));\n}\n\nexport const factory = () => {\n    return Node.create({\n        name: \"image-figure\",\n\n        addOptions() {\n            return {\n                HTMLAttributes: {},\n            };\n        },\n\n        addAttributes() {\n            return {\n                src: {\n                    default: null,\n                },\n                alt: {\n                    default: null,\n                },\n                title: {\n                    default: null,\n                },\n            };\n        },\n\n        group: \"block\",\n        inline: false,\n\n        allowGapCursor: false,\n        atom: true,\n        draggable: false,\n        isolating: true,\n        selectable: false,\n\n        parseHTML() {\n            return [\n                {\n                    tag: \"img\",\n                    getAttrs: (node) => node.closest(\"figure\") !== null && null, // prosemirror expects null for a successful check.\n                },\n            ];\n        },\n\n        renderHTML({ HTMLAttributes }) {\n            return [\"img\", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n        },\n\n        addProseMirrorPlugins() {\n            return [\n                new Plugin({\n                    props: {\n                        handleDOMEvents: {\n                            dragstart: (view, event) => {\n                                // prevent drag/drop at all.\n                                event.preventDefault();\n                                return false;\n                            },\n                        },\n                    },\n                }),\n            ];\n        },\n    });\n};\n","import events from \"@patternslib/patternslib/src/core/events\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\n\nexport const TARGETS = [];\n\nexport function focus_handler(el) {\n    // make element focusable\n    // See: https://javascript.info/focus-blur\n    el.setAttribute(\"tabindex\", \"-1\"); // not user-selectable but programmatically focusable.\n    events.add_event_listener(\n        el,\n        \"focus\",\n        \"tiptap-focusin\",\n        async () => {\n            utils.timeout(1); // short timeout to ensure focus class is set even if tiptap_blur_handler is called concurrently.\n            TARGETS.map((it) => it?.classList.add(\"tiptap-focus\"));\n        },\n        true\n    );\n    events.add_event_listener(\n        el,\n        \"blur\",\n        \"tiptap-focusout\",\n        () => {\n            TARGETS.map((it) => it?.classList.remove(\"tiptap-focus\"));\n        },\n        true\n    );\n}\n"],"names":["panel_observer","init","app","button","addEventListener","image_panel","document","querySelector","options","imagePanel","focus_handler","reinit","image_src","image_alt","image_title","image_caption","image_confirm","update_callback","set_focus","selected_image_src","cmd","editor","chain","insertContent","type","content","attrs","src","value","alt","title","text","focus","run","disconnect","MutationObserver","observe","childList","subtree","attributes","characterData","factory","Node","name","addOptions","HTMLAttributes","addAttributes","default","group","inline","allowGapCursor","atom","draggable","isolating","selectable","parseHTML","tag","getAttrs","node","closest","renderHTML","mergeAttributes","this","addProseMirrorPlugins","props","handleDOMEvents","dragstart","view","event","preventDefault","TARGETS","el","setAttribute","async","map","it","classList","add","remove"],"sourceRoot":""}