{"version":3,"file":"chunks/8018.59f1dc266df9dd89e0f5.min.js","mappings":"2MAIA,IAAIA,EA2DG,SAASC,GAAK,IAAEC,EAAG,OAAEC,IAExBA,EAAOC,iBAAiB,mBAAmB,IA3D/C,UAAsB,IAAEF,IACpB,MAAMG,EAAeC,SAASC,cAAcL,EAAIM,QAAQC,aACxD,IAAKJ,EAED,YADA,UAAS,2BAGb,IAAAK,eAAcL,GAEd,MAAMM,EAAS,KACX,MAAMC,EAAcP,EAAaE,cAAc,wBACzCM,EAAiBR,EAAaE,cAAc,0CAGlDK,EAAYE,MAAQZ,EAAIa,OAAOC,UAC/BJ,EAAYK,cAAc,IAAIC,MAAM,UAEpC,MAAMC,EAAmBC,IACrB,MAAMC,EAAMnB,EAAIa,OAAOO,SACL,IAAdF,GACAC,EAAIE,QAERF,EAAIG,WAAWZ,EAAYE,OAAO,GAClCO,EAAII,OAGJZ,EAEA,uBACIA,EACA,QACA,yBACA,IAAMM,GAAgB,KAI1B,uBACIP,EACA,QACA,qBACAO,IAKZR,IACIX,GACAA,EAAe0B,aAEnB1B,EAAiB,IAAI2B,iBAAiBhB,GACtCX,EAAe4B,QAAQvB,EAAc,CACjCwB,WAAW,EACXC,SAAS,EACTC,YAAY,EACZC,eAAe,IAM8B3B,CAAa,CAAEH,IAAKA,Q,gIC9DlE,MAAM+B,EAAU,GAEhB,SAASvB,EAAcwB,GAG1BA,EAAGC,aAAa,WAAY,MAC5B,uBACID,EACA,QACA,kBACAE,UACI,YAAc,GACdH,EAAQI,KAAKC,GAAOA,GAAIC,UAAUC,IAAI,qBAE1C,GAEJ,uBACIN,EACA,OACA,mBACA,KACID,EAAQI,KAAKC,GAAOA,GAAIC,UAAUE,OAAO,qBAE7C","sources":["webpack://oira.prototype/./node_modules/@patternslib/pat-tiptap/src/extensions/source.js","webpack://oira.prototype/./node_modules/@patternslib/pat-tiptap/src/focus-handler.js"],"sourcesContent":["import { focus_handler } from \"../focus-handler\";\nimport log from \"../tiptap\";\nimport events from \"@patternslib/patternslib/src/core/events\";\n\nlet panel_observer;\n\nfunction source_panel({ app }) {\n    const source_panel = document.querySelector(app.options.sourcePanel);\n    if (!source_panel) {\n        log.warn(\"No source panel found.\");\n        return;\n    }\n    focus_handler(source_panel);\n\n    const reinit = () => {\n        const source_text = source_panel.querySelector(\"[name=tiptap-source]\"); // prettier-ignore\n        const source_confirm = source_panel.querySelector(\".tiptap-confirm, [name=tiptap-confirm]\"); // prettier-ignore\n\n        // set form to initial values\n        source_text.value = app.editor.getHTML();\n        source_text.dispatchEvent(new Event(\"input\"));\n\n        const update_callback = (set_focus) => {\n            const cmd = app.editor.chain();\n            if (set_focus === true) {\n                cmd.focus();\n            }\n            cmd.setContent(source_text.value, true);\n            cmd.run();\n        };\n\n        if (source_confirm) {\n            // update on click on confirm\n            events.add_event_listener(\n                source_confirm,\n                \"click\",\n                \"tiptap_source_confirm\",\n                () => update_callback(true)\n            );\n        } else {\n            // update on input/change\n            events.add_event_listener(\n                source_text,\n                \"input\",\n                \"tiptap_source_text\",\n                update_callback\n            );\n        }\n    };\n\n    reinit();\n    if (panel_observer) {\n        panel_observer.disconnect();\n    }\n    panel_observer = new MutationObserver(reinit);\n    panel_observer.observe(source_panel, {\n        childList: true,\n        subtree: true,\n        attributes: false,\n        characterData: false,\n    });\n}\n\nexport function init({ app, button }) {\n    // Initialize modal after it has injected.\n    button.addEventListener(\"pat-modal-ready\", () => source_panel({ app: app }));\n}\n","import events from \"@patternslib/patternslib/src/core/events\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\n\nexport const TARGETS = [];\n\nexport function focus_handler(el) {\n    // make element focusable\n    // See: https://javascript.info/focus-blur\n    el.setAttribute(\"tabindex\", \"-1\"); // not user-selectable but programmatically focusable.\n    events.add_event_listener(\n        el,\n        \"focus\",\n        \"tiptap-focusin\",\n        async () => {\n            utils.timeout(1); // short timeout to ensure focus class is set even if tiptap_blur_handler is called concurrently.\n            TARGETS.map((it) => it?.classList.add(\"tiptap-focus\"));\n        },\n        true\n    );\n    events.add_event_listener(\n        el,\n        \"blur\",\n        \"tiptap-focusout\",\n        () => {\n            TARGETS.map((it) => it?.classList.remove(\"tiptap-focus\"));\n        },\n        true\n    );\n}\n"],"names":["panel_observer","init","app","button","addEventListener","source_panel","document","querySelector","options","sourcePanel","focus_handler","reinit","source_text","source_confirm","value","editor","getHTML","dispatchEvent","Event","update_callback","set_focus","cmd","chain","focus","setContent","run","disconnect","MutationObserver","observe","childList","subtree","attributes","characterData","TARGETS","el","setAttribute","async","map","it","classList","add","remove"],"sourceRoot":""}