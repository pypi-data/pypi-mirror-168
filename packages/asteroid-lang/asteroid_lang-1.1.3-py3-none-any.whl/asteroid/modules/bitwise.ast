------------------------------------------------------------------
-- bitwise.ast
--
-- Defines bitwise operations
--
-- (c) University of Rhode Island
------------------------------------------------------------------

-- define the bitwise module object

------------------------------------------------------------------
structure __BITWISE_MODULE__
------------------------------------------------------------------
with

------------------------------------------------------------------
 -- Bitwise AND
function band
------------------------------------------------------------------
with(x:%integer, y:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')
y_val = state.symbol_table.lookup_sym('y')

__retval__ = ('integer', x_val[1] & y_val[1])
"
end

------------------------------------------------------------------
 -- Bitwise OR
function bor
------------------------------------------------------------------
with(x:%integer, y:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')
y_val = state.symbol_table.lookup_sym('y')

__retval__ = ('integer', x_val[1] | y_val[1])
"
end

------------------------------------------------------------------
 -- Bitwise NOT
function bnot
------------------------------------------------------------------
with(x:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('integer', ~x_val[1])
"
end

------------------------------------------------------------------
 -- Bitwise XOR
function bxor
------------------------------------------------------------------
with(x:%integer, y:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')
y_val = state.symbol_table.lookup_sym('y')

__retval__ = ('integer', x_val[1] ^ y_val[1])
"
end

------------------------------------------------------------------
 -- Bitwise left shift
function blshift
------------------------------------------------------------------
with(x:%integer, y:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')
y_val = state.symbol_table.lookup_sym('y')

__retval__ = ('integer', x_val[1] << y_val[1])
"
end

------------------------------------------------------------------
 -- Bitwise right shift
function brshift
------------------------------------------------------------------
with(x:%integer, y:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')
y_val = state.symbol_table.lookup_sym('y')

__retval__ = ('integer', x_val[1] >> y_val[1])
"
end

------------------------------------------------------------------
-- Bitwise left rotate
function blrotate
------------------------------------------------------------------
with(x:%integer, i:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')[1]
i_val = state.symbol_table.lookup_sym('i')[1]

# Convert the number to an array of bits
bitstr = bin(x_val)[2:]

final = bitstr[i_val:] + bitstr[:i_val]
final = int(final, 2)

__retval__ = ('integer', final)
"
end

------------------------------------------------------------------
-- Bitwise right rotate
function brrotate
------------------------------------------------------------------
with(x:%integer, i:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')[1]
i_val = state.symbol_table.lookup_sym('i')[1]

# Convert the number to an array of bits
bitstr = bin(x_val)[2:]

# Use the negative of the index for the right rotation
final = bitstr[-i_val:] + bitstr[:-i_val]
final = int(final, 2)

__retval__ = ('integer', final)
"
end

------------------------------------------------------------------
-- Set the ith bit
function bsetbit
------------------------------------------------------------------
with(x:%integer, i:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')[1]
i_val = state.symbol_table.lookup_sym('i')[1]

final = ((1 << i_val) | x_val)
__retval__ = ('integer', final)
"
end

------------------------------------------------------------------
-- Clear the ith bit
function bclearbit
------------------------------------------------------------------
with(x:%integer, i:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')[1]
i_val = state.symbol_table.lookup_sym('i')[1]

final = (x_val & (~(1 << i_val - 1)))
__retval__ = ('integer' , final)
"
end

------------------------------------------------------------------
-- Get the bit size
function bsize
------------------------------------------------------------------
with(x:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')[1]

__retval__ = ('integer', x_val.bit_length())
"
end

end -- __BITWISE__

------------------------------------------------------------------
-- instantiate the bitwise module object
let bitwise = __BITWISE_MODULE__().
