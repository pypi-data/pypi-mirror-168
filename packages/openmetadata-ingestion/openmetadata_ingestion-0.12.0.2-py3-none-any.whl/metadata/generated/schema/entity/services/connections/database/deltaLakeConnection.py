# generated by datamodel-codegen:
#   filename:  entity/services/connections/database/deltaLakeConnection.json
#   timestamp: 2022-09-21T06:42:59+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Extra, Field

from .. import connectionBasicType


class DeltaLakeType(Enum):
    DeltaLake = 'DeltaLake'


class DeltaLakeConnection(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[DeltaLakeType] = Field(
        DeltaLakeType.DeltaLake, description='Service Type', title='Service Type'
    )
    metastoreHostPort: Optional[str] = Field(
        None,
        description='Host and port of the remote Hive Metastore.',
        title='Metastore Host and Port',
    )
    metastoreFilePath: Optional[str] = Field(
        None,
        description='File path of the local Hive Metastore.',
        title='Metastore Local File Path',
    )
    appName: Optional[str] = Field(
        None, description='pySpark App Name.', title='Application Name'
    )
    connectionArguments: Optional[connectionBasicType.ConnectionArguments] = Field(
        None,
        description='Key-Value pairs that will be used to add configs to the SparkSession.',
        title='Connection Arguments',
    )
    supportsMetadataExtraction: Optional[
        connectionBasicType.SupportsMetadataExtraction
    ] = Field(None, title='Supports Metadata Extraction')
