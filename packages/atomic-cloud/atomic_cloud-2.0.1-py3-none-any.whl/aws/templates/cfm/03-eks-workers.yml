AWSTemplateFormatVersion: 2010-09-09
Description: 'EKS Managed Nodes'
Resources:
  {% if isCicd %}
  {% for subnet in subnets %}
  ManagedNodeGroup{{subnet.azUpper}}:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: {{clusterName}}-cluster
      LaunchTemplate: 
        Name: {{clusterName}}-node-template
      NodegroupName: standard-workers-{{region}}{{subnet.azLower}}
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 1
      Subnets:
        - {{subnet.subnetId}}
      InstanceTypes:
        - t3.large
      AmiType: AL2_x86_64
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Labels:
        alpha.eksctl.io/cluster-name: {{clusterName}}-cluster
        alpha.eksctl.io/nodegroup-name: standard-workers-{{region}}{{subnet.azLower}}
      Tags:
        alpha.eksctl.io/nodegroup-name: standard-workers-{{region}}{{subnet.azLower}}
        alpha.eksctl.io/nodegroup-type: managed
  {% endfor %}
  {% else %}
  {% for group in workerGroups %}
  {{group.workerGroupResourceName}}:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: {{clusterName}}-cluster
      LaunchTemplate:
        Name: {{clusterName}}-node-template
      NodegroupName: {{ group.workerGroupName }}
      ScalingConfig:
        MinSize: {{ group.minCount }}
        MaxSize: {{ group.maxCount }}
        DesiredSize: {{ group.desiredCount }}
      Subnets: !Split
        - ','
        - !ImportValue '{{clusterName}}-public-subnets'
      InstanceTypes:
        - {{ group.instanceType }}
      AmiType: {{ group.amiType }}
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Labels:
        alpha.eksctl.io/cluster-name: {{clusterName}}-cluster
        alpha.eksctl.io/nodegroup-name: standard-workers
      Tags:
        alpha.eksctl.io/nodegroup-name: standard-workers
        alpha.eksctl.io/nodegroup-type: managed
  {% endfor %}
  {% endif %}

  NodeLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeSize: 80
              VolumeType: gp2
        UserData: !Base64
          "Fn::Sub": |
            MIME-Version: 1.0
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="

            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"

            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh {{clusterName}}-cluster {{InstanceLaunchArgs}}
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeGroup  \
                     --region ${AWS::Region}

            --==BOUNDARY==
      LaunchTemplateName: {{clusterName}}-node-template

  NodeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: {{clusterName}}-nodes-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonS3FullAccess'
        {% if isCicd %}
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudFrontFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess'
        {% endif %}
      Path: /
  WorkerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: '{{clusterName}}-worker-policy'
      Roles:
        - !Ref NodeInstanceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
            - 'autoscaling:DescribeAutoScalingGroups'
            - 'autoscaling:DescribeAutoScalingInstances'
            - 'autoscaling:DescribeLaunchConfigurations'
            - 'autoscaling:DescribeTags'
            - 'autoscaling:SetDesiredCapacity'
            - 'autoscaling:TerminateInstanceInAutoScalingGroup'
            Resource: '*'
          - Effect: Allow
            Action:
            - acm:DescribeCertificate
            - acm:ListCertificates
            - acm:GetCertificate
            Resource: '*'
          - Effect: Allow
            Action:
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:CreateSecurityGroup
            - ec2:CreateTags
            - ec2:DeleteTags
            - ec2:DeleteSecurityGroup
            - ec2:DescribeAccountAttributes
            - ec2:DescribeAddresses
            - ec2:DescribeInstances
            - ec2:DescribeInstanceStatus
            - ec2:DescribeInternetGateways
            - ec2:DescribeNetworkInterfaces
            - ec2:DescribeSecurityGroups
            - ec2:DescribeSubnets
            - ec2:DescribeTags
            - ec2:DescribeVpcs
            - ec2:ModifyInstanceAttribute
            - ec2:ModifyNetworkInterfaceAttribute
            - ec2:RevokeSecurityGroupIngress
            Resource: '*'
          - Effect: Allow
            Action:
            - elasticloadbalancing:AddListenerCertificates
            - elasticloadbalancing:AddTags
            - elasticloadbalancing:CreateListener
            - elasticloadbalancing:CreateLoadBalancer
            - elasticloadbalancing:CreateRule
            - elasticloadbalancing:CreateTargetGroup
            - elasticloadbalancing:DeleteListener
            - elasticloadbalancing:DeleteLoadBalancer
            - elasticloadbalancing:DeleteRule
            - elasticloadbalancing:DeleteTargetGroup
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:DescribeListenerCertificates
            - elasticloadbalancing:DescribeListeners
            - elasticloadbalancing:DescribeLoadBalancers
            - elasticloadbalancing:DescribeLoadBalancerAttributes
            - elasticloadbalancing:DescribeRules
            - elasticloadbalancing:DescribeSSLPolicies
            - elasticloadbalancing:DescribeTags
            - elasticloadbalancing:DescribeTargetGroups
            - elasticloadbalancing:DescribeTargetGroupAttributes
            - elasticloadbalancing:DescribeTargetHealth
            - elasticloadbalancing:ModifyListener
            - elasticloadbalancing:ModifyLoadBalancerAttributes
            - elasticloadbalancing:ModifyRule
            - elasticloadbalancing:ModifyTargetGroup
            - elasticloadbalancing:ModifyTargetGroupAttributes
            - elasticloadbalancing:RegisterTargets
            - elasticloadbalancing:RemoveListenerCertificates
            - elasticloadbalancing:RemoveTags
            - elasticloadbalancing:SetIpAddressType
            - elasticloadbalancing:SetSecurityGroups
            - elasticloadbalancing:SetSubnets
            - elasticloadbalancing:SetWebAcl
            Resource: '*'
          - Effect: Allow
            Action:
            - iam:CreateServiceLinkedRole
            - iam:GetServerCertificate
            - iam:ListServerCertificates
            Resource: '*'
          - Effect: Allow
            Action:
            - cognito-idp:DescribeUserPoolClient
            Resource: '*'
          - Effect: Allow
            Action:
            - waf-regional:GetWebACLForResource
            - waf-regional:GetWebACL
            - waf-regional:AssociateWebACL
            - waf-regional:DisassociateWebACL
            Resource: '*'
          - Effect: Allow
            Action:
            - tag:GetResources
            - tag:TagResources
            Resource: '*'
          - Effect: Allow
            Action:
            - waf:GetWebACL
            Resource: '*'
          - Effect: Allow
            Action:
            - wafv2:GetWebACL
            - wafv2:GetWebACLForResource
            - wafv2:AssociateWebACL
            - wafv2:DisassociateWebACL
            Resource: '*'
          - Effect: Allow
            Action:
            - shield:DescribeProtection
            - shield:GetSubscriptionState
            - shield:DeleteProtection
            - shield:CreateProtection
            - shield:DescribeSubscription
            - shield:ListProtections
            Resource: '*'
          - Effect: Allow
            Action:
            - secretsmanager:GetResourcePolicy
            - secretsmanager:DescribeSecret
            - secretsmanager:GetRandomPassword
            - secretsmanager:ListSecrets
            - secretsmanager:ListSecretVersionIds
            - secretsmanager:GetSecretValue
            Resource: '*'

Outputs:
  {% if isCicd %}
  {% for subnet in subnets %}
  NodegroupName{{subnet.azUpper}}:
    Value: !GetAtt ManagedNodeGroup{{subnet.azUpper}}.NodegroupName
  NodegroupArn{{subnet.azUpper}}:
    Value: !GetAtt ManagedNodeGroup{{subnet.azUpper}}.Arn
  {% endfor %}
  {% else %}
  {% for group in workerGroups %}
  NodegroupName{{group.workerGroupResourceName}}:
    Value: !GetAtt {{group.workerGroupResourceName}}.NodegroupName
  NodegroupArn{{group.workerGroupResourceName}}:
    Value: !GetAtt {{group.workerGroupResourceName}}.Arn
  {% endfor %}
  {% endif %}
  ClusterName:
    Value: {{clusterName}}-cluster
  NodeRoleArn:
    Value: !GetAtt NodeInstanceRole.Arn
