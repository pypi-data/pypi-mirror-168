{"version":3,"file":"886f871e.js","mappings":";AA0IA;;AAEA;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;AAhBA;;;;;;;;;;AAlHA","sources":["webpack://smartautomatic-server-frontend/./src/panels/lovelace/cards/hui-statistics-graph-card.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/chart/statistics-chart\";\nimport { SmartAutomatic } from \"../../../types\";\nimport { hasConfigOrEntitiesChanged } from \"../common/has-changed\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport { LovelaceCard } from \"../types\";\nimport { StatisticsGraphCardConfig } from \"./types\";\nimport { fetchStatistics, Statistics } from \"../../../data/history\";\n\n@customElement(\"hui-statistics-graph-card\")\nexport class HuiStatisticsGraphCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement() {\n    await import(\"../editor/config-elements/hui-statistics-graph-card-editor\");\n    return document.createElement(\"hui-statistics-graph-card-editor\");\n  }\n\n  public static getStubConfig(): StatisticsGraphCardConfig {\n    return { type: \"statistics-graph\", entities: [] };\n  }\n\n  @property({ attribute: false }) public hass?: SmartAutomatic;\n\n  @state() private _statistics?: Statistics;\n\n  @state() private _config?: StatisticsGraphCardConfig;\n\n  private _entities: string[] = [];\n\n  private _names: Record<string, string> = {};\n\n  private _fetching = false;\n\n  private _interval?: number;\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._interval) {\n      clearInterval(this._interval);\n      this._interval = undefined;\n    }\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.hasUpdated) {\n      return;\n    }\n    this._getStatistics();\n    // statistics are created every hour\n    clearInterval(this._interval);\n    this._interval = window.setInterval(\n      () => this._getStatistics(),\n      1000 * 60 * 60\n    );\n  }\n\n  public getCardSize(): number {\n    return this._config?.title ? 2 : 0 + 2 * (this._entities?.length || 1);\n  }\n\n  public setConfig(config: StatisticsGraphCardConfig): void {\n    if (!config.entities || !Array.isArray(config.entities)) {\n      throw new Error(\"Entities need to be an array\");\n    }\n\n    if (!config.entities.length) {\n      throw new Error(\"You must include at least one entity\");\n    }\n\n    const configEntities = config.entities\n      ? processConfigEntities(config.entities, false)\n      : [];\n\n    this._entities = [];\n    configEntities.forEach((entity) => {\n      this._entities.push(entity.entity);\n      if (entity.name) {\n        this._names[entity.entity] = entity.name;\n      }\n    });\n\n    if (typeof config.stat_types === \"string\") {\n      this._config = { ...config, stat_types: [config.stat_types] };\n    } else if (!config.stat_types) {\n      this._config = { ...config, stat_types: [\"sum\", \"min\", \"max\", \"mean\"] };\n    } else {\n      this._config = config;\n    }\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (changedProps.has(\"_statistics\")) {\n      return true;\n    }\n    return hasConfigOrEntitiesChanged(this, changedProps);\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (!this._config || !changedProps.has(\"_config\")) {\n      return;\n    }\n\n    const oldConfig = changedProps.get(\"_config\") as\n      | StatisticsGraphCardConfig\n      | undefined;\n\n    if (\n      oldConfig?.entities !== this._config.entities ||\n      oldConfig?.days_to_show !== this._config.days_to_show ||\n      oldConfig?.period !== this._config.period\n    ) {\n      this._getStatistics();\n      // statistics are created every hour\n      clearInterval(this._interval);\n      this._interval = window.setInterval(\n        () => this._getStatistics(),\n        1000 * 60 * 60\n      );\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <ha-card .header=${this._config.title}>\n        <div\n          class=\"content ${classMap({\n            \"has-header\": !!this._config.title,\n          })}\"\n        >\n          <statistics-chart\n            .hass=${this.hass}\n            .isLoadingData=${!this._statistics}\n            .statisticsData=${this._statistics}\n            .chartType=${this._config.chart_type || \"line\"}\n            .statTypes=${this._config.stat_types!}\n            .names=${this._names}\n          ></statistics-chart>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private async _getStatistics(): Promise<void> {\n    if (this._fetching) {\n      return;\n    }\n    const startDate = new Date();\n    startDate.setTime(\n      startDate.getTime() -\n        1000 * 60 * 60 * (24 * (this._config!.days_to_show || 30) + 1)\n    );\n    this._fetching = true;\n    try {\n      this._statistics = await fetchStatistics(\n        this.hass!,\n        startDate,\n        undefined,\n        this._entities,\n        this._config!.period\n      );\n    } finally {\n      this._fetching = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        height: 100%;\n      }\n      .content {\n        padding: 16px;\n      }\n      .has-header {\n        padding-top: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-statistics-graph-card\": HuiStatisticsGraphCard;\n  }\n}\n"],"names":[],"sourceRoot":""}