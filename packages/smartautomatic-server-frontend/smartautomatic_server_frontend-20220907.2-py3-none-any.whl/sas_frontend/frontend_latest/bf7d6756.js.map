{"version":3,"file":"bf7d6756.js","mappings":";;AA4CA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvCA;ACoBA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAjDA;;;;;;;;AAAA;;;;ACHA;;;;;;;;;;;;;;;;;;;;ACCA;;;;;;;ACwCA;AACA;AACA;AACA;;;;;AAKA;;AAIA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;;;;;AA/DA;;;;;;;;;;;;;AAAA;;;ACWA;;;;;;;AAOA;AACA;AACA;;;;AAIA;AACA;;;;ACpDA;AACA;;;;;;AADA;;;;;;;;;;;;;;;;;;;;;ADqBA;;;AEeA;AACA;AACA;;AAEA;;;;AAKA;;;AAGA;AACA;;;AAKA;;AAGA;;AAGA;;AAEA;AAEA;;;;AAKA;AAGA;AAIA;;AAEA;;AAIA;AAGA;AACA;;;AAMA;;;AAIA;;;;;;;;;;;;;;;;;;;;;AAlFA","sources":["webpack://smartautomatic-server-frontend/./src/components/ha-alert.ts","webpack://smartautomatic-server-frontend/./src/components/ha-button-menu.ts","webpack://smartautomatic-server-frontend/./src/components/ha-checkbox.ts","webpack://smartautomatic-server-frontend/./src/components/ha-switch.ts","webpack://smartautomatic-server-frontend/./src/components/ha-analytics.ts","webpack://smartautomatic-server-frontend/./src/panels/config/core/ha-config-analytics.ts","webpack://smartautomatic-server-frontend/./src/components/ha-analytics-learn-more.ts","webpack://smartautomatic-server-frontend/./src/panels/config/storage/ha-config-section-storage.ts"],"sourcesContent":["import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { Analytics, AnalyticsPreferences } from \"../data/analytics\";\nimport { haStyle } from \"../resources/styles\";\nimport type { SmartAutomatic } from \"../types\";\nimport \"./ha-settings-row\";\nimport \"./ha-switch\";\nimport type { HaSwitch } from \"./ha-switch\";\n\nconst ADDITIONAL_PREFERENCES = [\n  {\n    key: \"usage\",\n    title: \"Usage\",\n    description: \"Details of what you use with SmartAutomatic\",\n  },\n  {\n    key: \"statistics\",\n    title: \"Statistical data\",\n    description: \"Counts containing total number of datapoints\",\n  },\n];\n\ndeclare global {\n  interface HASSDomEvents {\n    \"analytics-preferences-changed\": { preferences: AnalyticsPreferences };\n  }\n}\n\n@customElement(\"ha-analytics\")\nexport class HaAnalytics extends LitElement {\n  @property({ attribute: false }) public hass!: SmartAutomatic;\n\n  @property({ attribute: false }) public analytics?: Analytics;\n\n  protected render(): TemplateResult {\n    const loading = this.analytics === undefined;\n    const baseEnabled = !loading && this.analytics!.preferences.base;\n\n    return html`\n      <ha-settings-row>\n        <span slot=\"heading\" data-for=\"base\"> Basic analytics </span>\n        <span slot=\"description\" data-for=\"base\">\n          This includes information about your system.\n        </span>\n        <ha-switch\n          @change=${this._handleRowClick}\n          .checked=${baseEnabled}\n          .preference=${\"base\"}\n          .disabled=${loading}\n          name=\"base\"\n        >\n        </ha-switch>\n      </ha-settings-row>\n      ${ADDITIONAL_PREFERENCES.map(\n        (preference) =>\n          html`\n            <ha-settings-row>\n              <span slot=\"heading\" data-for=${preference.key}>\n                ${preference.title}\n              </span>\n              <span slot=\"description\" data-for=${preference.key}>\n                ${preference.description}\n              </span>\n              <span>\n                <ha-switch\n                  @change=${this._handleRowClick}\n                  .checked=${this.analytics?.preferences[preference.key]}\n                  .preference=${preference.key}\n                  name=${preference.key}\n                >\n                </ha-switch>\n                ${!baseEnabled\n                  ? html`\n                      <paper-tooltip animation-delay=\"0\" position=\"right\">\n                        You need to enable basic analytics for this option to be\n                        available\n                      </paper-tooltip>\n                    `\n                  : \"\"}\n              </span>\n            </ha-settings-row>\n          `\n      )}\n      <ha-settings-row>\n        <span slot=\"heading\" data-for=\"diagnostics\"> Diagnostics </span>\n        <span slot=\"description\" data-for=\"diagnostics\">\n          Share crash reports when unexpected errors occur.\n        </span>\n        <ha-switch\n          @change=${this._handleRowClick}\n          .checked=${this.analytics?.preferences.diagnostics}\n          .preference=${\"diagnostics\"}\n          .disabled=${loading}\n          name=\"diagnostics\"\n        >\n        </ha-switch>\n      </ha-settings-row>\n    `;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n\n    this.shadowRoot!.querySelectorAll(\"*[data-for]\").forEach((el) => {\n      const forEl = (el as HTMLElement).dataset.for;\n      delete (el as HTMLElement).dataset.for;\n\n      el.addEventListener(\"click\", () => {\n        const toFocus = this.shadowRoot!.querySelector(\n          `*[name=${forEl}]`\n        ) as HTMLElement | null;\n\n        if (toFocus) {\n          toFocus.focus();\n          toFocus.click();\n        }\n      });\n    });\n  }\n\n  private _handleRowClick(ev: Event) {\n    const target = ev.currentTarget as HaSwitch;\n    const preference = (target as any).preference;\n    const preferences = this.analytics ? { ...this.analytics.preferences } : {};\n\n    if (preferences[preference] === target.checked) {\n      return;\n    }\n\n    preferences[preference] = target.checked;\n\n    if (\n      ADDITIONAL_PREFERENCES.some((entry) => entry.key === preference) &&\n      target.checked\n    ) {\n      preferences.base = true;\n    } else if (preference === \"base\" && !target.checked) {\n      preferences.usage = false;\n      preferences.statistics = false;\n    }\n\n    fireEvent(this, \"analytics-preferences-changed\", { preferences });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n\n        span[slot=\"heading\"],\n        span[slot=\"description\"] {\n          cursor: pointer;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-analytics\": HaAnalytics;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-analytics\";\nimport { analyticsLearnMore } from \"../../../components/ha-analytics-learn-more\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-settings-row\";\nimport {\n  Analytics,\n  getAnalyticsDetails,\n  setAnalyticsPreferences,\n} from \"../../../data/analytics\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { SmartAutomatic } from \"../../../types\";\n\n@customElement(\"ha-config-analytics\")\nclass ConfigAnalytics extends LitElement {\n  @property({ attribute: false }) public hass!: SmartAutomatic;\n\n  @state() private _analyticsDetails?: Analytics;\n\n  @state() private _error?: string;\n\n  protected render(): TemplateResult {\n    const error = this._error\n      ? this._error\n      : !isComponentLoaded(this.hass, \"analytics\")\n      ? \"Analytics integration not loaded\"\n      : undefined;\n\n    return html`\n      <ha-card outlined>\n        <div class=\"card-content\">\n          ${error ? html`<div class=\"error\">${error}</div>` : \"\"}\n          <p>\n            Share anonymized information from your installation to help make\n            SmartAutomatic better and help us convince manufacturers to add\n            local control and privacy-focused features.\n          </p>\n          <ha-analytics\n            @analytics-preferences-changed=${this._preferencesChanged}\n            .hass=${this.hass}\n            .analytics=${this._analyticsDetails}\n          ></ha-analytics>\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._save}>\n            ${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.save_button\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n      <div class=\"footer\">${analyticsLearnMore(this.hass)}</div>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (isComponentLoaded(this.hass, \"analytics\")) {\n      this._load();\n    }\n  }\n\n  private async _load() {\n    this._error = undefined;\n    try {\n      this._analyticsDetails = await getAnalyticsDetails(this.hass);\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private async _save() {\n    this._error = undefined;\n    try {\n      await setAnalyticsPreferences(\n        this.hass,\n        this._analyticsDetails?.preferences || {}\n      );\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private _preferencesChanged(event: CustomEvent): void {\n    this._analyticsDetails = {\n      ...this._analyticsDetails!,\n      preferences: event.detail.preferences,\n    };\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n        p {\n          margin-top: 0;\n        }\n        .card-actions {\n          display: flex;\n          flex-direction: row-reverse;\n          justify-content: space-between;\n          align-items: center;\n        }\n        .footer {\n          padding: 32px 0 16px;\n          text-align: center;\n        }\n      `, // row-reverse so we tab first to \"save\"\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-analytics\": ConfigAnalytics;\n  }\n}\n","import { html } from \"lit\";\nimport { SmartAutomatic } from \"../types\";\nimport { documentationUrl } from \"../util/documentation-url\";\n\nexport const analyticsLearnMore = (hass: SmartAutomatic) => html`<a\n  .href=${documentationUrl(hass, \"/integrations/analytics/\")}\n  target=\"_blank\"\n  rel=\"noreferrer\"\n>\n  How we process your data\n</a>`;\n","import { mdiDotsVertical } from \"@mdi/js\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-metric\";\nimport { fetchSaserverHostInfo, SaserverHostInfo } from \"../../../data/saserver/host\";\nimport \"../../../layouts/hass-subpage\";\nimport type { SmartAutomatic, Route } from \"../../../types\";\nimport {\n  getValueInPercentage,\n  roundWithOneDecimal,\n} from \"../../../util/calculate\";\nimport \"../core/ha-config-analytics\";\nimport { showMoveDatadiskDialog } from \"./show-dialog-move-datadisk\";\n\n@customElement(\"ha-config-section-storage\")\nclass HaConfigSectionStorage extends LitElement {\n  @property({ attribute: false }) public hass!: SmartAutomatic;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _error?: { code: string; message: string };\n\n  @state() private _hostInfo?: SaserverHostInfo;\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (isComponentLoaded(this.hass, \"saserver\")) {\n      this._load();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage\n        back-path=\"/config/system\"\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${this.hass.localize(\"ui.panel.config.storage.caption\")}\n      >\n        ${this._hostInfo\n          ? html`\n              <ha-button-menu corner=\"BOTTOM_START\" slot=\"toolbar-icon\">\n                <ha-icon-button\n                  slot=\"trigger\"\n                  .label=${this.hass.localize(\"ui.common.menu\")}\n                  .path=${mdiDotsVertical}\n                ></ha-icon-button>\n                <mwc-list-item @click=${this._moveDatadisk}>\n                  ${this.hass.localize(\n                    \"ui.panel.config.storage.datadisk.title\"\n                  )}\n                </mwc-list-item>\n              </ha-button-menu>\n            `\n          : \"\"}\n        <div class=\"content\">\n          ${this._error\n            ? html`\n                <ha-alert alert-type=\"error\"\n                  >${this._error.message || this._error.code}</ha-alert\n                >\n              `\n            : \"\"}\n          ${this._hostInfo\n            ? html`\n                <ha-card outlined>\n                  <div class=\"card-content\">\n                    <ha-metric\n                      .heading=${this.hass.localize(\n                        \"ui.panel.config.storage.used_space\"\n                      )}\n                      .value=${this._getUsedSpace(\n                        this._hostInfo?.disk_used,\n                        this._hostInfo?.disk_total\n                      )}\n                      .tooltip=${`${this._hostInfo.disk_used} GB/${this._hostInfo.disk_total} GB`}\n                    ></ha-metric>\n                    ${this._hostInfo.disk_life_time !== \"\" &&\n                    this._hostInfo.disk_life_time >= 10\n                      ? html`\n                          <ha-metric\n                            .heading=${this.hass.localize(\n                              \"ui.panel.config.storage.emmc_lifetime_used\"\n                            )}\n                            .value=${this._hostInfo.disk_life_time}\n                            .tooltip=${`${\n                              this._hostInfo.disk_life_time - 10\n                            } % -\n                          ${this._hostInfo.disk_life_time} %`}\n                            class=\"emmc\"\n                          ></ha-metric>\n                        `\n                      : \"\"}\n                  </div>\n                </ha-card>\n              `\n            : \"\"}\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private async _load() {\n    try {\n      this._hostInfo = await fetchSaserverHostInfo(this.hass);\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private _moveDatadisk(): void {\n    showMoveDatadiskDialog(this, {\n      hostInfo: this._hostInfo!,\n    });\n  }\n\n  private _getUsedSpace = (used: number, total: number) =>\n    roundWithOneDecimal(getValueInPercentage(used, 0, total));\n\n  static styles = css`\n    .content {\n      padding: 28px 20px 0;\n      max-width: 1040px;\n      margin: 0 auto;\n    }\n    ha-card {\n      max-width: 600px;\n      margin: 0 auto;\n      justify-content: space-between;\n      flex-direction: column;\n      display: flex;\n    }\n    .card-content {\n      display: flex;\n      justify-content: space-between;\n      flex-direction: column;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section-storage\": HaConfigSectionStorage;\n  }\n}\n"],"names":[],"sourceRoot":""}