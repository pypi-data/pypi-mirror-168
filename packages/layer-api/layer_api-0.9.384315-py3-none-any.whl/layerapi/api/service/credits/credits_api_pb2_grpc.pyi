"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import layerapi.api.service.credits.credits_api_pb2
import grpc

class CreditsAPIStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    GetCreditLogV2: grpc.UnaryUnaryMultiCallable[
        api.service.credits.credits_api_pb2.GetCreditLogV2Request,
        api.service.credits.credits_api_pb2.GetCreditLogV2Response]
    """v2
    if we were using packages we could use package versions:
    https://github.com/uber/prototool/blob/dev/style/README.md#directory-structure
    """

    RecordBillableActivity: grpc.UnaryUnaryMultiCallable[
        api.service.credits.credits_api_pb2.RecordBillableActivityRequest,
        api.service.credits.credits_api_pb2.RecordBillableActivityResponse]
    """Billable activities are reported progressively as they are performed.
    The reported activity duration, indicated by start and end times, is used to compute an interim credit balance.
    The total consumed credit balance for an activity will be the sum of all interim credit balances.
    """

    SetBalanceToFreeAllowance: grpc.UnaryUnaryMultiCallable[
        api.service.credits.credits_api_pb2.SetBalanceToFreeAllowanceRequest,
        api.service.credits.credits_api_pb2.SetBalanceToFreeAllowanceResponse]

    FundBalance: grpc.UnaryUnaryMultiCallable[
        api.service.credits.credits_api_pb2.FundBalanceRequest,
        api.service.credits.credits_api_pb2.FundBalanceResponse]

    RefillAllBalancesUpToFreeAllowance: grpc.UnaryUnaryMultiCallable[
        api.service.credits.credits_api_pb2.RefillAllBalancesUpToFreeAllowanceRequest,
        api.service.credits.credits_api_pb2.RefillAllBalancesUpToFreeAllowanceResponse]

    GetMonthlyBillingReport: grpc.UnaryUnaryMultiCallable[
        api.service.credits.credits_api_pb2.GetMonthlyBillingReportRequest,
        api.service.credits.credits_api_pb2.GetMonthlyBillingReportResponse]
    """v1"""

    GetCreditsBalance: grpc.UnaryUnaryMultiCallable[
        api.service.credits.credits_api_pb2.GetCreditsBalanceRequest,
        api.service.credits.credits_api_pb2.GetCreditsBalanceResponse]

    GetWeeklyUsageReport: grpc.UnaryUnaryMultiCallable[
        api.service.credits.credits_api_pb2.GetWeeklyUsageReportRequest,
        api.service.credits.credits_api_pb2.GetWeeklyUsageReportResponse]


class CreditsAPIServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetCreditLogV2(self,
        request: api.service.credits.credits_api_pb2.GetCreditLogV2Request,
        context: grpc.ServicerContext,
    ) -> api.service.credits.credits_api_pb2.GetCreditLogV2Response:
        """v2
        if we were using packages we could use package versions:
        https://github.com/uber/prototool/blob/dev/style/README.md#directory-structure
        """
        pass

    @abc.abstractmethod
    def RecordBillableActivity(self,
        request: api.service.credits.credits_api_pb2.RecordBillableActivityRequest,
        context: grpc.ServicerContext,
    ) -> api.service.credits.credits_api_pb2.RecordBillableActivityResponse:
        """Billable activities are reported progressively as they are performed.
        The reported activity duration, indicated by start and end times, is used to compute an interim credit balance.
        The total consumed credit balance for an activity will be the sum of all interim credit balances.
        """
        pass

    @abc.abstractmethod
    def SetBalanceToFreeAllowance(self,
        request: api.service.credits.credits_api_pb2.SetBalanceToFreeAllowanceRequest,
        context: grpc.ServicerContext,
    ) -> api.service.credits.credits_api_pb2.SetBalanceToFreeAllowanceResponse: ...

    @abc.abstractmethod
    def FundBalance(self,
        request: api.service.credits.credits_api_pb2.FundBalanceRequest,
        context: grpc.ServicerContext,
    ) -> api.service.credits.credits_api_pb2.FundBalanceResponse: ...

    @abc.abstractmethod
    def RefillAllBalancesUpToFreeAllowance(self,
        request: api.service.credits.credits_api_pb2.RefillAllBalancesUpToFreeAllowanceRequest,
        context: grpc.ServicerContext,
    ) -> api.service.credits.credits_api_pb2.RefillAllBalancesUpToFreeAllowanceResponse: ...

    @abc.abstractmethod
    def GetMonthlyBillingReport(self,
        request: api.service.credits.credits_api_pb2.GetMonthlyBillingReportRequest,
        context: grpc.ServicerContext,
    ) -> api.service.credits.credits_api_pb2.GetMonthlyBillingReportResponse:
        """v1"""
        pass

    @abc.abstractmethod
    def GetCreditsBalance(self,
        request: api.service.credits.credits_api_pb2.GetCreditsBalanceRequest,
        context: grpc.ServicerContext,
    ) -> api.service.credits.credits_api_pb2.GetCreditsBalanceResponse: ...

    @abc.abstractmethod
    def GetWeeklyUsageReport(self,
        request: api.service.credits.credits_api_pb2.GetWeeklyUsageReportRequest,
        context: grpc.ServicerContext,
    ) -> api.service.credits.credits_api_pb2.GetWeeklyUsageReportResponse: ...


def add_CreditsAPIServicer_to_server(servicer: CreditsAPIServicer, server: grpc.Server) -> None: ...
