"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import layerapi.api.ids_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Project(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _Color:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ColorEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Project._Color.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        COLOR_INVALID: Project._Color.ValueType  # 0
        COLOR_RED: Project._Color.ValueType  # 1
        COLOR_ORANGE: Project._Color.ValueType  # 2
        COLOR_AMBER: Project._Color.ValueType  # 3
        COLOR_YELLOW: Project._Color.ValueType  # 4
        COLOR_LIME: Project._Color.ValueType  # 5
        COLOR_GREEN: Project._Color.ValueType  # 6
        COLOR_TEAL: Project._Color.ValueType  # 7
        COLOR_CYAN: Project._Color.ValueType  # 8
        COLOR_SKY: Project._Color.ValueType  # 9
        COLOR_BLUE: Project._Color.ValueType  # 10
        COLOR_INDIGO: Project._Color.ValueType  # 11
        COLOR_VIOLET: Project._Color.ValueType  # 12
        COLOR_PURPLE: Project._Color.ValueType  # 13
        COLOR_FUCHSIA: Project._Color.ValueType  # 14
        COLOR_PINK: Project._Color.ValueType  # 15
    class Color(_Color, metaclass=_ColorEnumTypeWrapper):
        pass

    COLOR_INVALID: Project.Color.ValueType  # 0
    COLOR_RED: Project.Color.ValueType  # 1
    COLOR_ORANGE: Project.Color.ValueType  # 2
    COLOR_AMBER: Project.Color.ValueType  # 3
    COLOR_YELLOW: Project.Color.ValueType  # 4
    COLOR_LIME: Project.Color.ValueType  # 5
    COLOR_GREEN: Project.Color.ValueType  # 6
    COLOR_TEAL: Project.Color.ValueType  # 7
    COLOR_CYAN: Project.Color.ValueType  # 8
    COLOR_SKY: Project.Color.ValueType  # 9
    COLOR_BLUE: Project.Color.ValueType  # 10
    COLOR_INDIGO: Project.Color.ValueType  # 11
    COLOR_VIOLET: Project.Color.ValueType  # 12
    COLOR_PURPLE: Project.Color.ValueType  # 13
    COLOR_FUCHSIA: Project.Color.ValueType  # 14
    COLOR_PINK: Project.Color.ValueType  # 15

    class _Visibility:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _VisibilityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Project._Visibility.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        VISIBILITY_INVALID: Project._Visibility.ValueType  # 0
        VISIBILITY_PRIVATE: Project._Visibility.ValueType  # 1
        VISIBILITY_PUBLIC: Project._Visibility.ValueType  # 2
    class Visibility(_Visibility, metaclass=_VisibilityEnumTypeWrapper):
        pass

    VISIBILITY_INVALID: Project.Visibility.ValueType  # 0
    VISIBILITY_PRIVATE: Project.Visibility.ValueType  # 1
    VISIBILITY_PUBLIC: Project.Visibility.ValueType  # 2

    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    CREATED_TIME_FIELD_NUMBER: builtins.int
    UPDATED_TIME_FIELD_NUMBER: builtins.int
    COLOR_FIELD_NUMBER: builtins.int
    README_FIELD_NUMBER: builtins.int
    VISIBILITY_FIELD_NUMBER: builtins.int
    CREATED_BY_ID_FIELD_NUMBER: builtins.int
    LIKES_FIELD_NUMBER: builtins.int
    VIEWS_FIELD_NUMBER: builtins.int
    ACCOUNT_ID_FIELD_NUMBER: builtins.int
    @property
    def id(self) -> api.ids_pb2.ProjectId: ...
    name: typing.Text
    description: typing.Text
    @property
    def created_time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def updated_time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    color: global___Project.Color.ValueType
    readme: typing.Text
    """README should eventually come from github, but for now we store it in our DB for display"""

    visibility: global___Project.Visibility.ValueType
    @property
    def created_by_id(self) -> api.ids_pb2.UserId: ...
    likes: builtins.int
    views: builtins.int
    @property
    def account_id(self) -> api.ids_pb2.AccountId: ...
    def __init__(self,
        *,
        id: typing.Optional[api.ids_pb2.ProjectId] = ...,
        name: typing.Text = ...,
        description: typing.Text = ...,
        created_time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        updated_time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        color: global___Project.Color.ValueType = ...,
        readme: typing.Text = ...,
        visibility: global___Project.Visibility.ValueType = ...,
        created_by_id: typing.Optional[api.ids_pb2.UserId] = ...,
        likes: builtins.int = ...,
        views: builtins.int = ...,
        account_id: typing.Optional[api.ids_pb2.AccountId] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["account_id",b"account_id","created_by_id",b"created_by_id","created_time",b"created_time","id",b"id","updated_time",b"updated_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["account_id",b"account_id","color",b"color","created_by_id",b"created_by_id","created_time",b"created_time","description",b"description","id",b"id","likes",b"likes","name",b"name","readme",b"readme","updated_time",b"updated_time","views",b"views","visibility",b"visibility"]) -> None: ...
global___Project = Project
