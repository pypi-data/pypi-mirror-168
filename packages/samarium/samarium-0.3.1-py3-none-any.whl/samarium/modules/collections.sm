<-operator;


@ Stack {

    create size? * {
        size <> -/;
        'stack: [];
        'size: size;
    }

    push item * {
        ? 'is_full() {
            "stack is full (size " + 'size.to_string() + ")"!!!;
        }
        'stack+: [item];
    }

    push_all items * {
        ... element ->? items {
            'push(element);
        }
    }

    special * {
        * 'stack$;
    }

    pop * {
        ? 'is_empty() {
            "stack is empty"!!!;
        }
        out: 'stack<<-/>>;
        'stack-: 'stack$ - /;
        * out;
    }

    peek * {
        ? 'is_empty() {
            "stack is empty"!!!;
        }
        * 'stack<<-/>>;
    }

    to_bit * {
        * 'stack$ > \;
    }

    is_full * {
        * 'size :: 'stack$;
    }

    is_empty * {
        * 'stack$ :: \;
    }

    to_string * {
        <-string.wrap;
        <-types.String;
        ?? {
            top: 'peek();
        } !! {
            top:;
        }
        ? top?! :: String {
            top: wrap(top.to_string(), "\"");
        }
        * "Stack(capacity:" + 'size.to_string()
        + ", size:" + 'stack$.to_string()
        + ", top:" + top.to_string()
        + ")";
    }

}

@ Queue {

    create size? * {
        size <> -/;
        'queue: [];
        'size: size;
    }

    special * {
        * 'queue$;
    }

    is_empty * {
        * ~~ '$;
    }

    is_full * {
        * '$ :: 'size;
    }

    throw_empty * {
        ? 'is_empty() {
            "queue is empty"!!!;
        }
    }

    put item * {
        ? 'is_full() {
            "queue is full (size " + 'size.to_string() + ")"!!!;
        }
        'queue+: [item];
    }

    put_all items * {
        ... item ->? items {
            'put(item);
        }
    }

    get * {
        'throw_empty();
        out: 'queue<<\>>;
        'queue-: \;
        * out;
    }

    first * {
        'throw_empty(); * 'queue<<\>>;
    }
    last * {
        'throw_empty(); * 'queue<<-/>>;
    }

    to_bit * {
        * '$ > \;
    }

    to_string * {
        <-string.wrap;
        <-types.String;
        ? '$ <: /\/ {
            items: 'queue.to_string();
        } ,, ? '$ > /\/ {
            first: 'first().to_string();
            last: 'last().to_string();
            ? 'first()?! :: String {
                first: wrap(first, "\"");
            }
            ? 'last()?! :: String {
                last: wrap(last, "\"");
            }
            items: "[" + first.to_string() + ", ..., " + last.to_string() + "]";
        } ,, {
            items: "[]";
        }
        * "Queue(capacity:" + 'size.to_string()
        + ", size:" + 'queue$.to_string()
        + ", items:" + items + ")";
    }

}

@ Set {

    create items? capacity? * {
        items <> [];
        capacity <> -/;
        <-iter.find;
        'find: find;
        'items: [i ... i ->? items] ? items ,, [];
        'capacity: capacity;
    }

    special * {
        * 'items$;
    }

    add value * {
        ? ~~ 'has(value) {
            ? 'is_full() {
                "set is full (capacity " + 'capacity.to_string() + ")"!!!;
            }
            'items+: [value];
            * /;
        }
        * \;
    }

    to_bit * {
        * ~~ 'is_empty();
    }

    to_string * {
        * "Set(capacity:" + 'capacity.to_string()
        + ", size:" + '$.to_string()
        + ", items:" + 'items.to_string()
        + ")";
    }

    remove value * {
        'items-: [value];
    }

    has value * {
        * 'find('items, value) >: \;
    }

    values * {
        * 'items;
    }

    clear * {
        'items: [];
    }

    is_empty * {
        * '$ :: \;
    }

    is_full * {
        * '$ :: 'capacity;
    }

    new_set_size a b * {
        * a$ ? a$ > b$ ,, b$;
    }

    union other * {
        ? other?! ::: Set()?! {
            "expected Set, received " + other?!.to_string()!!!;
        }

        union_set: Set('values(), 'new_set_size(', other) ++ /\);

        ... value ->? other.values() {
            union_set.add(value);
        }

        * union_set;
    }

    intersection other * {
        ? other?! ::: Set()?! {
            "expected Set, received " + other?!.to_string()!!!;
        }

        intersection_set: Set([], 'new_set_size(', other));

        ... value ->? 'values() {
            ? other.has(value) {
                intersection_set.add(value);
            }
        }

        * intersection_set;
    }

    difference other * {
        ? other?! ::: Set()?! {
            "expected Set, received " + other?!.to_string()!!!;
        }

        difference_set: Set([], 'new_set_size(', other));

        ... value ->? 'values() {
            ? ~~ other.has(value) {
                difference_set.add(value);
            }
        }

        * difference_set;
    }

    is_subset other * {
        ? other?! ::: Set()?! {
            "expected Set, received " + other?!.to_string()!!!;
        }

        ? '$ > other$ { * \; }

        ... value ->? 'values() {
            ? ~~ other.has(value) { * \; }
        }
        * /;
    }

}

@ Deque {

    create size? * {
        size <> -/;
        'deque: [];
        'size: size;
    }

    special * {
        * 'deque$;
    }

    is_empty * {
        * ~~ '$;
    }

    is_full * {
        * '$ :: 'size;
    }

    throw_empty * {
        ? 'is_empty() {
            "deque is empty"!!!;
        }
    }

    throw_full * {
        ? 'is_full() {
            "deque is full (size " + 'size.to_string() + ")"!!!;
        }
    }

    put_front item * {
        'throw_full(); 'deque: [item] + 'deque;
    }

    put item * {
        'throw_full(); 'deque+: [item];
    }

    put_front_all items * {
        ... item ->? items {
            'put_front(item);
        }
    }

    put_all items * {
        ... item ->? items {
            'put(item);
        }
    }

    front * {
        * 'deque<<\>>;
    }

    back * {
        * 'deque<<-/>>;
    }

    to_bit * {
        * '$ > \;
    }

    get_front * {
        'throw_empty();
        out: 'deque<<\>>;
        'deque-: \;
        * out;
    }

    get * {
        'throw_empty();
        out: 'deque<<-/>>;
        'deque-: 'deque$ - /;
        * out;
    }

    to_string * {
        <-string.wrap;
        <-types.String;
        ? '$ <: /\/ {
            items: 'deque.to_string();
        } ,, ? '$ > /\/ {
            front: 'front().to_string();
            back: 'back().to_string();
            ? 'front()?! :: String {
                front: wrap(front, "\"");
            }
            ? 'back()?! :: String {
                back: wrap(back, "\"");
            }
            items: "[" + front.to_string() + ", ..., " + back.to_string() + "]";
        } ,, {
            items: "[]";
        }
        * "Deque(capacity:" + 'size.to_string()
        + ", size:" + 'deque$.to_string()
        + ", items:" + items + ")";
    }

}

@ StaticArray {

    create value type? * {
        type <>;
        <-types.Array, Integer;
        ? value?! :: Integer {
            'value: {{}};
            'size: value;
            'type: type;
        } ,, ? value?! :: Array {
            'value: {{}};
            'size: value$;
            'type: type;
            i: \;
            ... e ->? value {
                ? e?! ::: type ::: {
                    "expected " + type.to_string() + ", found " + e?!.to_string()!!!;
                }
                'value<<i>>: e;
                i+: /;
            }
        } ,, {
            "expected Integer or Array, found " + value?!.to_string()!!!;
        }
    }

    special * {
        * 'value$;
    }

    to_string * {
        * "StaticArray(size:" + 'size.to_string()
        + ", type:" + 'type.to_string()
        + ", items:" + 'value.to_string()
        + ")";
    }

    to_bit * {
        * 'value.to_bit();
    }

    throw_invalid_index arg * {
        <-types.Integer;
        ? arg?! ::: Integer {
            "expected Integer, received " + arg?!.to_string()!!!;
        }
        ? ~~ (\ <: arg < 'size) {
            "index " + arg.to_string() + " is out of bounds (size " + 'size.to_string() + ")"!!!;
        }
    }

    throw_invalid_type type * {
        ? type ::: 'type ::: {
            "expected " + 'type.to_string() + ", received " + type.to_string()!!!;
        }
    }

    get_item index * {
        'throw_invalid_index(index);
        * 'value<<index>>;
    }

    set_item index value * {
        'throw_invalid_index(index);
        'throw_invalid_type(value?!);
        'value<<index>>: value;
    }

}

@ ArithmeticArray {

    create array * {
        'array: array;
    }

    apply op other * {
        * ArithmeticArray([op(i, other) ... i ->? 'array]);
    }

    and other * {
        * 'apply(operator.and, other);
    }

    add other * {
        * 'apply(operator.add, other);
    }

    divide other * {
        * 'apply(operator.divide, other);
    }

    equals other * {
        * 'apply(operator.equals, other);
    }

    greater_than_or_equal other * {
        * 'apply(operator.greater_than_or_equal, other);
    }

    greater_than other * {
        * 'apply(operator.greater_than, other);
    }

    less_than_or_equal other * {
        * 'apply(operator.less_than_or_equal, other);
    }

    less_than other * {
        * 'apply(operator.less_than, other);
    }

    mod other * {
        * 'apply(operator.mod, other);
    }

    multiply other * {
        * 'apply(operator.multiply, other);
    }

    not_equals other * {
        * 'apply(operator.not_equals, other);
    }

    or other * {
        * 'apply(operator.or, other);
    }

    power other * {
        * 'apply(operator.power, other);
    }

    subtract other * {
        * 'apply(operator.subtract, other);
    }

    xor other * {
        * 'apply(operator.xor, other);
    }

    and_assign other * {
        'array: 'and(other).array; * ';
    }

    add_assign other * {
        'array: 'add(other).array; * ';
    }

    divide_assign other * {
        'array: 'divide(other).array; * ';
    }

    mod_assign other * {
        'array: 'mod(other).array; * ';
    }

    multiply_assign other * {
        'array: 'multiply(other).array; * ';
    }

    or_assign other * {
        'array: 'or(other).array; * ';
    }

    power_assign other * {
        'array: 'power(other).array; * ';
    }

    subtract_assign other * {
        'array: 'subtract(other).array; * ';
    }

    xor_assign other * {
        'array: 'xor(other).array; * ';
    }

    get_item item * {
        <-types.Array;
        out: 'array<<item>>;
        ? out?! :: Array {
            * ArithmeticArray(out);
        }
        * out;
    }

    set_item item value * {
        'array<<item>>: value;
    }

    special * {
        * 'array$;
    }

    to_bit * {
        * 'array.to_bit();
    }

    to_string * {
        * 'array.to_string();
    }

}