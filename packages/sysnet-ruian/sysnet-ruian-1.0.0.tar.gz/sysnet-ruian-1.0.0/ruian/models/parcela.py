# coding: utf-8

"""
    SYSNET RUIAN services API

    SYSNET RÃšIAN service REST API  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Parcela(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'kmenovecislo': 'int',
        'pododdelenicisla': 'int',
        'vymeraparcely': 'float',
        'administrative_division': 'AdministrativeDivision'
    }

    attribute_map = {
        'id': 'id',
        'kmenovecislo': 'kmenovecislo',
        'pododdelenicisla': 'pododdelenicisla',
        'vymeraparcely': 'vymeraparcely',
        'administrative_division': 'administrative_division'
    }

    def __init__(self, id=None, kmenovecislo=None, pododdelenicisla=None, vymeraparcely=None, administrative_division=None):  # noqa: E501
        """Parcela - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._kmenovecislo = None
        self._pododdelenicisla = None
        self._vymeraparcely = None
        self._administrative_division = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if kmenovecislo is not None:
            self.kmenovecislo = kmenovecislo
        if pododdelenicisla is not None:
            self.pododdelenicisla = pododdelenicisla
        if vymeraparcely is not None:
            self.vymeraparcely = vymeraparcely
        if administrative_division is not None:
            self.administrative_division = administrative_division

    @property
    def id(self):
        """Gets the id of this Parcela.  # noqa: E501


        :return: The id of this Parcela.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Parcela.


        :param id: The id of this Parcela.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def kmenovecislo(self):
        """Gets the kmenovecislo of this Parcela.  # noqa: E501


        :return: The kmenovecislo of this Parcela.  # noqa: E501
        :rtype: int
        """
        return self._kmenovecislo

    @kmenovecislo.setter
    def kmenovecislo(self, kmenovecislo):
        """Sets the kmenovecislo of this Parcela.


        :param kmenovecislo: The kmenovecislo of this Parcela.  # noqa: E501
        :type: int
        """

        self._kmenovecislo = kmenovecislo

    @property
    def pododdelenicisla(self):
        """Gets the pododdelenicisla of this Parcela.  # noqa: E501


        :return: The pododdelenicisla of this Parcela.  # noqa: E501
        :rtype: int
        """
        return self._pododdelenicisla

    @pododdelenicisla.setter
    def pododdelenicisla(self, pododdelenicisla):
        """Sets the pododdelenicisla of this Parcela.


        :param pododdelenicisla: The pododdelenicisla of this Parcela.  # noqa: E501
        :type: int
        """

        self._pododdelenicisla = pododdelenicisla

    @property
    def vymeraparcely(self):
        """Gets the vymeraparcely of this Parcela.  # noqa: E501


        :return: The vymeraparcely of this Parcela.  # noqa: E501
        :rtype: float
        """
        return self._vymeraparcely

    @vymeraparcely.setter
    def vymeraparcely(self, vymeraparcely):
        """Sets the vymeraparcely of this Parcela.


        :param vymeraparcely: The vymeraparcely of this Parcela.  # noqa: E501
        :type: float
        """

        self._vymeraparcely = vymeraparcely

    @property
    def administrative_division(self):
        """Gets the administrative_division of this Parcela.  # noqa: E501


        :return: The administrative_division of this Parcela.  # noqa: E501
        :rtype: AdministrativeDivision
        """
        return self._administrative_division

    @administrative_division.setter
    def administrative_division(self, administrative_division):
        """Sets the administrative_division of this Parcela.


        :param administrative_division: The administrative_division of this Parcela.  # noqa: E501
        :type: AdministrativeDivision
        """

        self._administrative_division = administrative_division

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Parcela, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Parcela):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
