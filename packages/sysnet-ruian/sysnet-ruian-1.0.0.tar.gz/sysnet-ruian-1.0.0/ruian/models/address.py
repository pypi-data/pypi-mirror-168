# coding: utf-8

"""
    SYSNET RUIAN services API

    SYSNET RÃšIAN service REST API  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'street': 'str',
        'house_number': 'int',
        'record_number': 'int',
        'orientation_number': 'int',
        'orientation_number_character': 'str',
        'zip_code': 'int',
        'locality': 'str',
        'locality_part': 'str',
        'district_number': 'int',
        'district': 'str',
        'ruian_id': 'int',
        'coordinates': 'Coordinates'
    }

    attribute_map = {
        'street': 'street',
        'house_number': 'house_number',
        'record_number': 'record_number',
        'orientation_number': 'orientation_number',
        'orientation_number_character': 'orientation_number_character',
        'zip_code': 'zip_code',
        'locality': 'locality',
        'locality_part': 'locality_part',
        'district_number': 'district_number',
        'district': 'district',
        'ruian_id': 'ruian_id',
        'coordinates': 'coordinates'
    }

    def __init__(self, street=None, house_number=None, record_number=None, orientation_number=None, orientation_number_character=None, zip_code=None, locality=None, locality_part=None, district_number=None, district=None, ruian_id=None, coordinates=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._street = None
        self._house_number = None
        self._record_number = None
        self._orientation_number = None
        self._orientation_number_character = None
        self._zip_code = None
        self._locality = None
        self._locality_part = None
        self._district_number = None
        self._district = None
        self._ruian_id = None
        self._coordinates = None
        self.discriminator = None
        if street is not None:
            self.street = street
        if house_number is not None:
            self.house_number = house_number
        if record_number is not None:
            self.record_number = record_number
        if orientation_number is not None:
            self.orientation_number = orientation_number
        if orientation_number_character is not None:
            self.orientation_number_character = orientation_number_character
        if zip_code is not None:
            self.zip_code = zip_code
        if locality is not None:
            self.locality = locality
        if locality_part is not None:
            self.locality_part = locality_part
        if district_number is not None:
            self.district_number = district_number
        if district is not None:
            self.district = district
        if ruian_id is not None:
            self.ruian_id = ruian_id
        if coordinates is not None:
            self.coordinates = coordinates

    @property
    def street(self):
        """Gets the street of this Address.  # noqa: E501


        :return: The street of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Address.


        :param street: The street of this Address.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def house_number(self):
        """Gets the house_number of this Address.  # noqa: E501


        :return: The house_number of this Address.  # noqa: E501
        :rtype: int
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this Address.


        :param house_number: The house_number of this Address.  # noqa: E501
        :type: int
        """

        self._house_number = house_number

    @property
    def record_number(self):
        """Gets the record_number of this Address.  # noqa: E501


        :return: The record_number of this Address.  # noqa: E501
        :rtype: int
        """
        return self._record_number

    @record_number.setter
    def record_number(self, record_number):
        """Sets the record_number of this Address.


        :param record_number: The record_number of this Address.  # noqa: E501
        :type: int
        """

        self._record_number = record_number

    @property
    def orientation_number(self):
        """Gets the orientation_number of this Address.  # noqa: E501


        :return: The orientation_number of this Address.  # noqa: E501
        :rtype: int
        """
        return self._orientation_number

    @orientation_number.setter
    def orientation_number(self, orientation_number):
        """Sets the orientation_number of this Address.


        :param orientation_number: The orientation_number of this Address.  # noqa: E501
        :type: int
        """

        self._orientation_number = orientation_number

    @property
    def orientation_number_character(self):
        """Gets the orientation_number_character of this Address.  # noqa: E501


        :return: The orientation_number_character of this Address.  # noqa: E501
        :rtype: str
        """
        return self._orientation_number_character

    @orientation_number_character.setter
    def orientation_number_character(self, orientation_number_character):
        """Sets the orientation_number_character of this Address.


        :param orientation_number_character: The orientation_number_character of this Address.  # noqa: E501
        :type: str
        """

        self._orientation_number_character = orientation_number_character

    @property
    def zip_code(self):
        """Gets the zip_code of this Address.  # noqa: E501


        :return: The zip_code of this Address.  # noqa: E501
        :rtype: int
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Address.


        :param zip_code: The zip_code of this Address.  # noqa: E501
        :type: int
        """

        self._zip_code = zip_code

    @property
    def locality(self):
        """Gets the locality of this Address.  # noqa: E501


        :return: The locality of this Address.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this Address.


        :param locality: The locality of this Address.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def locality_part(self):
        """Gets the locality_part of this Address.  # noqa: E501


        :return: The locality_part of this Address.  # noqa: E501
        :rtype: str
        """
        return self._locality_part

    @locality_part.setter
    def locality_part(self, locality_part):
        """Sets the locality_part of this Address.


        :param locality_part: The locality_part of this Address.  # noqa: E501
        :type: str
        """

        self._locality_part = locality_part

    @property
    def district_number(self):
        """Gets the district_number of this Address.  # noqa: E501


        :return: The district_number of this Address.  # noqa: E501
        :rtype: int
        """
        return self._district_number

    @district_number.setter
    def district_number(self, district_number):
        """Sets the district_number of this Address.


        :param district_number: The district_number of this Address.  # noqa: E501
        :type: int
        """

        self._district_number = district_number

    @property
    def district(self):
        """Gets the district of this Address.  # noqa: E501


        :return: The district of this Address.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Address.


        :param district: The district of this Address.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def ruian_id(self):
        """Gets the ruian_id of this Address.  # noqa: E501


        :return: The ruian_id of this Address.  # noqa: E501
        :rtype: int
        """
        return self._ruian_id

    @ruian_id.setter
    def ruian_id(self, ruian_id):
        """Sets the ruian_id of this Address.


        :param ruian_id: The ruian_id of this Address.  # noqa: E501
        :type: int
        """

        self._ruian_id = ruian_id

    @property
    def coordinates(self):
        """Gets the coordinates of this Address.  # noqa: E501


        :return: The coordinates of this Address.  # noqa: E501
        :rtype: Coordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this Address.


        :param coordinates: The coordinates of this Address.  # noqa: E501
        :type: Coordinates
        """

        self._coordinates = coordinates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
