# coding: utf-8

"""
    SYSNET RUIAN services API

    SYSNET RÃšIAN service REST API  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KatastralniUzemi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'nazev': 'str',
        'administrative_division': 'AdministrativeDivision'
    }

    attribute_map = {
        'id': 'id',
        'nazev': 'nazev',
        'administrative_division': 'administrative_division'
    }

    def __init__(self, id=None, nazev=None, administrative_division=None):  # noqa: E501
        """KatastralniUzemi - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._nazev = None
        self._administrative_division = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if nazev is not None:
            self.nazev = nazev
        if administrative_division is not None:
            self.administrative_division = administrative_division

    @property
    def id(self):
        """Gets the id of this KatastralniUzemi.  # noqa: E501


        :return: The id of this KatastralniUzemi.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KatastralniUzemi.


        :param id: The id of this KatastralniUzemi.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def nazev(self):
        """Gets the nazev of this KatastralniUzemi.  # noqa: E501


        :return: The nazev of this KatastralniUzemi.  # noqa: E501
        :rtype: str
        """
        return self._nazev

    @nazev.setter
    def nazev(self, nazev):
        """Sets the nazev of this KatastralniUzemi.


        :param nazev: The nazev of this KatastralniUzemi.  # noqa: E501
        :type: str
        """

        self._nazev = nazev

    @property
    def administrative_division(self):
        """Gets the administrative_division of this KatastralniUzemi.  # noqa: E501


        :return: The administrative_division of this KatastralniUzemi.  # noqa: E501
        :rtype: AdministrativeDivision
        """
        return self._administrative_division

    @administrative_division.setter
    def administrative_division(self, administrative_division):
        """Sets the administrative_division of this KatastralniUzemi.


        :param administrative_division: The administrative_division of this KatastralniUzemi.  # noqa: E501
        :type: AdministrativeDivision
        """

        self._administrative_division = administrative_division

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KatastralniUzemi, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KatastralniUzemi):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
