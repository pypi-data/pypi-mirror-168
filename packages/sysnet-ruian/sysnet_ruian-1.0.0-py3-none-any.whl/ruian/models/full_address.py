# coding: utf-8

"""
    SYSNET RUIAN services API

    SYSNET RÃšIAN service REST API  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FullAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_point': 'Address',
        'administrative_division': 'AdministrativeDivision',
        'basin': 'Povodi',
        'map50_sheet': 'MapovyList50'
    }

    attribute_map = {
        'address_point': 'address_point',
        'administrative_division': 'administrative_division',
        'basin': 'basin',
        'map50_sheet': 'map50_sheet'
    }

    def __init__(self, address_point=None, administrative_division=None, basin=None, map50_sheet=None):  # noqa: E501
        """FullAddress - a model defined in Swagger"""  # noqa: E501
        self._address_point = None
        self._administrative_division = None
        self._basin = None
        self._map50_sheet = None
        self.discriminator = None
        if address_point is not None:
            self.address_point = address_point
        if administrative_division is not None:
            self.administrative_division = administrative_division
        if basin is not None:
            self.basin = basin
        if map50_sheet is not None:
            self.map50_sheet = map50_sheet

    @property
    def address_point(self):
        """Gets the address_point of this FullAddress.  # noqa: E501


        :return: The address_point of this FullAddress.  # noqa: E501
        :rtype: Address
        """
        return self._address_point

    @address_point.setter
    def address_point(self, address_point):
        """Sets the address_point of this FullAddress.


        :param address_point: The address_point of this FullAddress.  # noqa: E501
        :type: Address
        """

        self._address_point = address_point

    @property
    def administrative_division(self):
        """Gets the administrative_division of this FullAddress.  # noqa: E501


        :return: The administrative_division of this FullAddress.  # noqa: E501
        :rtype: AdministrativeDivision
        """
        return self._administrative_division

    @administrative_division.setter
    def administrative_division(self, administrative_division):
        """Sets the administrative_division of this FullAddress.


        :param administrative_division: The administrative_division of this FullAddress.  # noqa: E501
        :type: AdministrativeDivision
        """

        self._administrative_division = administrative_division

    @property
    def basin(self):
        """Gets the basin of this FullAddress.  # noqa: E501


        :return: The basin of this FullAddress.  # noqa: E501
        :rtype: Povodi
        """
        return self._basin

    @basin.setter
    def basin(self, basin):
        """Sets the basin of this FullAddress.


        :param basin: The basin of this FullAddress.  # noqa: E501
        :type: Povodi
        """

        self._basin = basin

    @property
    def map50_sheet(self):
        """Gets the map50_sheet of this FullAddress.  # noqa: E501


        :return: The map50_sheet of this FullAddress.  # noqa: E501
        :rtype: MapovyList50
        """
        return self._map50_sheet

    @map50_sheet.setter
    def map50_sheet(self, map50_sheet):
        """Sets the map50_sheet of this FullAddress.


        :param map50_sheet: The map50_sheet of this FullAddress.  # noqa: E501
        :type: MapovyList50
        """

        self._map50_sheet = map50_sheet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FullAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FullAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
