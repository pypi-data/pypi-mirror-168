# coding: utf-8

"""
    SYSNET RUIAN services API

    SYSNET RÃšIAN service REST API  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Povodi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'id_1': 'int',
        'id_2': 'int',
        'id_3': 'int',
        'chp': 'str',
        'chp_d': 'str',
        'chp_u': 'str',
        'naz_pov_1': 'str',
        'naz_pov_2': 'str',
        'naz_pov_3': 'str',
        'naz_tok': 'str',
        'naz_tok_2': 'str'
    }

    attribute_map = {
        'id': 'id',
        'id_1': 'id_1',
        'id_2': 'id_2',
        'id_3': 'id_3',
        'chp': 'chp',
        'chp_d': 'chp_d',
        'chp_u': 'chp_u',
        'naz_pov_1': 'naz_pov_1',
        'naz_pov_2': 'naz_pov_2',
        'naz_pov_3': 'naz_pov_3',
        'naz_tok': 'naz_tok',
        'naz_tok_2': 'naz_tok_2'
    }

    def __init__(self, id=None, id_1=None, id_2=None, id_3=None, chp=None, chp_d=None, chp_u=None, naz_pov_1=None, naz_pov_2=None, naz_pov_3=None, naz_tok=None, naz_tok_2=None):  # noqa: E501
        """Povodi - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_1 = None
        self._id_2 = None
        self._id_3 = None
        self._chp = None
        self._chp_d = None
        self._chp_u = None
        self._naz_pov_1 = None
        self._naz_pov_2 = None
        self._naz_pov_3 = None
        self._naz_tok = None
        self._naz_tok_2 = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if id_1 is not None:
            self.id_1 = id_1
        if id_2 is not None:
            self.id_2 = id_2
        if id_3 is not None:
            self.id_3 = id_3
        if chp is not None:
            self.chp = chp
        if chp_d is not None:
            self.chp_d = chp_d
        if chp_u is not None:
            self.chp_u = chp_u
        if naz_pov_1 is not None:
            self.naz_pov_1 = naz_pov_1
        if naz_pov_2 is not None:
            self.naz_pov_2 = naz_pov_2
        if naz_pov_3 is not None:
            self.naz_pov_3 = naz_pov_3
        if naz_tok is not None:
            self.naz_tok = naz_tok
        if naz_tok_2 is not None:
            self.naz_tok_2 = naz_tok_2

    @property
    def id(self):
        """Gets the id of this Povodi.  # noqa: E501


        :return: The id of this Povodi.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Povodi.


        :param id: The id of this Povodi.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def id_1(self):
        """Gets the id_1 of this Povodi.  # noqa: E501


        :return: The id_1 of this Povodi.  # noqa: E501
        :rtype: int
        """
        return self._id_1

    @id_1.setter
    def id_1(self, id_1):
        """Sets the id_1 of this Povodi.


        :param id_1: The id_1 of this Povodi.  # noqa: E501
        :type: int
        """

        self._id_1 = id_1

    @property
    def id_2(self):
        """Gets the id_2 of this Povodi.  # noqa: E501


        :return: The id_2 of this Povodi.  # noqa: E501
        :rtype: int
        """
        return self._id_2

    @id_2.setter
    def id_2(self, id_2):
        """Sets the id_2 of this Povodi.


        :param id_2: The id_2 of this Povodi.  # noqa: E501
        :type: int
        """

        self._id_2 = id_2

    @property
    def id_3(self):
        """Gets the id_3 of this Povodi.  # noqa: E501


        :return: The id_3 of this Povodi.  # noqa: E501
        :rtype: int
        """
        return self._id_3

    @id_3.setter
    def id_3(self, id_3):
        """Sets the id_3 of this Povodi.


        :param id_3: The id_3 of this Povodi.  # noqa: E501
        :type: int
        """

        self._id_3 = id_3

    @property
    def chp(self):
        """Gets the chp of this Povodi.  # noqa: E501


        :return: The chp of this Povodi.  # noqa: E501
        :rtype: str
        """
        return self._chp

    @chp.setter
    def chp(self, chp):
        """Sets the chp of this Povodi.


        :param chp: The chp of this Povodi.  # noqa: E501
        :type: str
        """

        self._chp = chp

    @property
    def chp_d(self):
        """Gets the chp_d of this Povodi.  # noqa: E501


        :return: The chp_d of this Povodi.  # noqa: E501
        :rtype: str
        """
        return self._chp_d

    @chp_d.setter
    def chp_d(self, chp_d):
        """Sets the chp_d of this Povodi.


        :param chp_d: The chp_d of this Povodi.  # noqa: E501
        :type: str
        """

        self._chp_d = chp_d

    @property
    def chp_u(self):
        """Gets the chp_u of this Povodi.  # noqa: E501


        :return: The chp_u of this Povodi.  # noqa: E501
        :rtype: str
        """
        return self._chp_u

    @chp_u.setter
    def chp_u(self, chp_u):
        """Sets the chp_u of this Povodi.


        :param chp_u: The chp_u of this Povodi.  # noqa: E501
        :type: str
        """

        self._chp_u = chp_u

    @property
    def naz_pov_1(self):
        """Gets the naz_pov_1 of this Povodi.  # noqa: E501


        :return: The naz_pov_1 of this Povodi.  # noqa: E501
        :rtype: str
        """
        return self._naz_pov_1

    @naz_pov_1.setter
    def naz_pov_1(self, naz_pov_1):
        """Sets the naz_pov_1 of this Povodi.


        :param naz_pov_1: The naz_pov_1 of this Povodi.  # noqa: E501
        :type: str
        """

        self._naz_pov_1 = naz_pov_1

    @property
    def naz_pov_2(self):
        """Gets the naz_pov_2 of this Povodi.  # noqa: E501


        :return: The naz_pov_2 of this Povodi.  # noqa: E501
        :rtype: str
        """
        return self._naz_pov_2

    @naz_pov_2.setter
    def naz_pov_2(self, naz_pov_2):
        """Sets the naz_pov_2 of this Povodi.


        :param naz_pov_2: The naz_pov_2 of this Povodi.  # noqa: E501
        :type: str
        """

        self._naz_pov_2 = naz_pov_2

    @property
    def naz_pov_3(self):
        """Gets the naz_pov_3 of this Povodi.  # noqa: E501


        :return: The naz_pov_3 of this Povodi.  # noqa: E501
        :rtype: str
        """
        return self._naz_pov_3

    @naz_pov_3.setter
    def naz_pov_3(self, naz_pov_3):
        """Sets the naz_pov_3 of this Povodi.


        :param naz_pov_3: The naz_pov_3 of this Povodi.  # noqa: E501
        :type: str
        """

        self._naz_pov_3 = naz_pov_3

    @property
    def naz_tok(self):
        """Gets the naz_tok of this Povodi.  # noqa: E501


        :return: The naz_tok of this Povodi.  # noqa: E501
        :rtype: str
        """
        return self._naz_tok

    @naz_tok.setter
    def naz_tok(self, naz_tok):
        """Sets the naz_tok of this Povodi.


        :param naz_tok: The naz_tok of this Povodi.  # noqa: E501
        :type: str
        """

        self._naz_tok = naz_tok

    @property
    def naz_tok_2(self):
        """Gets the naz_tok_2 of this Povodi.  # noqa: E501


        :return: The naz_tok_2 of this Povodi.  # noqa: E501
        :rtype: str
        """
        return self._naz_tok_2

    @naz_tok_2.setter
    def naz_tok_2(self, naz_tok_2):
        """Sets the naz_tok_2 of this Povodi.


        :param naz_tok_2: The naz_tok_2 of this Povodi.  # noqa: E501
        :type: str
        """

        self._naz_tok_2 = naz_tok_2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Povodi, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Povodi):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
