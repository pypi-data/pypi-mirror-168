# coding: utf-8

"""
    SYSNET Managed Dictionaries API

    REST API of the SYSNET managed dictionaries (code lists) system.  Primarily designed for the CITES Registry.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Descriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'key_alt': 'str',
        'dictionary': 'str',
        'active': 'bool',
        'values': 'list[DescriptorValue]'
    }

    attribute_map = {
        'key': 'key',
        'key_alt': 'key_alt',
        'dictionary': 'dictionary',
        'active': 'active',
        'values': 'values'
    }

    def __init__(self, key=None, key_alt=None, dictionary=None, active=None, values=None):  # noqa: E501
        """Descriptor - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._key_alt = None
        self._dictionary = None
        self._active = None
        self._values = None
        self.discriminator = None
        self.key = key
        if key_alt is not None:
            self.key_alt = key_alt
        self.dictionary = dictionary
        if active is not None:
            self.active = active
        self.values = values

    @property
    def key(self):
        """Gets the key of this Descriptor.  # noqa: E501

        Hlavní klíč deskriptoru  # noqa: E501

        :return: The key of this Descriptor.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Descriptor.

        Hlavní klíč deskriptoru  # noqa: E501

        :param key: The key of this Descriptor.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def key_alt(self):
        """Gets the key_alt of this Descriptor.  # noqa: E501

        Alternativní klíč deskriptoru  # noqa: E501

        :return: The key_alt of this Descriptor.  # noqa: E501
        :rtype: str
        """
        return self._key_alt

    @key_alt.setter
    def key_alt(self, key_alt):
        """Sets the key_alt of this Descriptor.

        Alternativní klíč deskriptoru  # noqa: E501

        :param key_alt: The key_alt of this Descriptor.  # noqa: E501
        :type: str
        """

        self._key_alt = key_alt

    @property
    def dictionary(self):
        """Gets the dictionary of this Descriptor.  # noqa: E501

        Kód řízeného slovníku  # noqa: E501

        :return: The dictionary of this Descriptor.  # noqa: E501
        :rtype: str
        """
        return self._dictionary

    @dictionary.setter
    def dictionary(self, dictionary):
        """Sets the dictionary of this Descriptor.

        Kód řízeného slovníku  # noqa: E501

        :param dictionary: The dictionary of this Descriptor.  # noqa: E501
        :type: str
        """
        if dictionary is None:
            raise ValueError("Invalid value for `dictionary`, must not be `None`")  # noqa: E501

        self._dictionary = dictionary

    @property
    def active(self):
        """Gets the active of this Descriptor.  # noqa: E501

        Descriptor is active  # noqa: E501

        :return: The active of this Descriptor.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Descriptor.

        Descriptor is active  # noqa: E501

        :param active: The active of this Descriptor.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def values(self):
        """Gets the values of this Descriptor.  # noqa: E501


        :return: The values of this Descriptor.  # noqa: E501
        :rtype: list[DescriptorValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Descriptor.


        :param values: The values of this Descriptor.  # noqa: E501
        :type: list[DescriptorValue]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Descriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Descriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
