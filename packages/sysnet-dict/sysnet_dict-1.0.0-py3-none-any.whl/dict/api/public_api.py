# coding: utf-8

"""
    SYSNET Managed Dictionaries API

    REST API of the SYSNET managed dictionaries (code lists) system.  Primarily designed for the CITES Registry.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dict.api_client import ApiClient


class PublicApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_descriptor(self, dictionary, key, **kwargs):  # noqa: E501
        """gets a descriptor by key  # noqa: E501

        By passing the key or alternate key, you can get the descriptor   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_descriptor(dictionary, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :param str key: Descriptor key or alternate key (required)
        :return: Descriptor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_descriptor_with_http_info(dictionary, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_descriptor_with_http_info(dictionary, key, **kwargs)  # noqa: E501
            return data

    def get_descriptor_with_http_info(self, dictionary, key, **kwargs):  # noqa: E501
        """gets a descriptor by key  # noqa: E501

        By passing the key or alternate key, you can get the descriptor   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_descriptor_with_http_info(dictionary, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :param str key: Descriptor key or alternate key (required)
        :return: Descriptor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dictionary', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_descriptor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dictionary' is set
        if ('dictionary' not in params or
                params['dictionary'] is None):
            raise ValueError("Missing the required parameter `dictionary` when calling `get_descriptor`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_descriptor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dictionary' in params:
            path_params['dictionary'] = params['dictionary']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{dictionary}/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Descriptor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_dictionary(self, dictionary, **kwargs):  # noqa: E501
        """searches dictionary (autocomplete)  # noqa: E501

        By passing in the appropriate options, you can search for available descriptors in the system.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_dictionary(dictionary, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :param str query: pass an optional search string for looking up dictionary
        :param bool active: return active/inactive descriptors
        :param int skip: number of records to skip for pagination
        :param int limit: maximum number of records to return
        :return: list[Descriptor]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_dictionary_with_http_info(dictionary, **kwargs)  # noqa: E501
        else:
            (data) = self.search_dictionary_with_http_info(dictionary, **kwargs)  # noqa: E501
            return data

    def search_dictionary_with_http_info(self, dictionary, **kwargs):  # noqa: E501
        """searches dictionary (autocomplete)  # noqa: E501

        By passing in the appropriate options, you can search for available descriptors in the system.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_dictionary_with_http_info(dictionary, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :param str query: pass an optional search string for looking up dictionary
        :param bool active: return active/inactive descriptors
        :param int skip: number of records to skip for pagination
        :param int limit: maximum number of records to return
        :return: list[Descriptor]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dictionary', 'query', 'active', 'skip', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_dictionary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dictionary' is set
        if ('dictionary' not in params or
                params['dictionary'] is None):
            raise ValueError("Missing the required parameter `dictionary` when calling `search_dictionary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dictionary' in params:
            path_params['dictionary'] = params['dictionary']  # noqa: E501

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{dictionary}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Descriptor]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
