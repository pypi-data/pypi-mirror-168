# coding: utf-8

"""
    SYSNET Managed Dictionaries API

    REST API of the SYSNET managed dictionaries (code lists) system.  Primarily designed for the CITES Registry.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dict.api_client import ApiClient


class AdminsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate_descriptor(self, dictionary, key, active, **kwargs):  # noqa: E501
        """activates/deactivates the descriptor by key  # noqa: E501

        By passing the key or alternate key, you can get the descriptor   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_descriptor(dictionary, key, active, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :param str key: Descriptor key or alternate key (required)
        :param bool active: activate/deactivate descriptor (required)
        :return: Descriptor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_descriptor_with_http_info(dictionary, key, active, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_descriptor_with_http_info(dictionary, key, active, **kwargs)  # noqa: E501
            return data

    def activate_descriptor_with_http_info(self, dictionary, key, active, **kwargs):  # noqa: E501
        """activates/deactivates the descriptor by key  # noqa: E501

        By passing the key or alternate key, you can get the descriptor   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_descriptor_with_http_info(dictionary, key, active, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :param str key: Descriptor key or alternate key (required)
        :param bool active: activate/deactivate descriptor (required)
        :return: Descriptor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dictionary', 'key', 'active']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_descriptor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dictionary' is set
        if ('dictionary' not in params or
                params['dictionary'] is None):
            raise ValueError("Missing the required parameter `dictionary` when calling `activate_descriptor`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `activate_descriptor`")  # noqa: E501
        # verify the required parameter 'active' is set
        if ('active' not in params or
                params['active'] is None):
            raise ValueError("Missing the required parameter `active` when calling `activate_descriptor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dictionary' in params:
            path_params['dictionary'] = params['dictionary']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/{dictionary}/{key}/activate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Descriptor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_descriptor(self, dictionary, **kwargs):  # noqa: E501
        """adds an descriptor  # noqa: E501

        Adds a descriptor to the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_descriptor(dictionary, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :param Descriptor body: Descriptor to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_descriptor_with_http_info(dictionary, **kwargs)  # noqa: E501
        else:
            (data) = self.add_descriptor_with_http_info(dictionary, **kwargs)  # noqa: E501
            return data

    def add_descriptor_with_http_info(self, dictionary, **kwargs):  # noqa: E501
        """adds an descriptor  # noqa: E501

        Adds a descriptor to the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_descriptor_with_http_info(dictionary, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :param Descriptor body: Descriptor to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dictionary', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_descriptor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dictionary' is set
        if ('dictionary' not in params or
                params['dictionary'] is None):
            raise ValueError("Missing the required parameter `dictionary` when calling `add_descriptor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dictionary' in params:
            path_params['dictionary'] = params['dictionary']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/{dictionary}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_descriptor(self, dictionary, key, **kwargs):  # noqa: E501
        """removes a descriptor  # noqa: E501

        By passing the key or alternate key, you can remove the descriptor   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_descriptor(dictionary, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :param str key: Descriptor key or alternate key (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_descriptor_with_http_info(dictionary, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_descriptor_with_http_info(dictionary, key, **kwargs)  # noqa: E501
            return data

    def delete_descriptor_with_http_info(self, dictionary, key, **kwargs):  # noqa: E501
        """removes a descriptor  # noqa: E501

        By passing the key or alternate key, you can remove the descriptor   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_descriptor_with_http_info(dictionary, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :param str key: Descriptor key or alternate key (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dictionary', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_descriptor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dictionary' is set
        if ('dictionary' not in params or
                params['dictionary'] is None):
            raise ValueError("Missing the required parameter `dictionary` when calling `delete_descriptor`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_descriptor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dictionary' in params:
            path_params['dictionary'] = params['dictionary']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/{dictionary}/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_all(self, **kwargs):  # noqa: E501
        """exports all descriptors from the system  # noqa: E501

        You can get all descriptors   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Descriptor]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.export_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def export_all_with_http_info(self, **kwargs):  # noqa: E501
        """exports all descriptors from the system  # noqa: E501

        You can get all descriptors   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Descriptor]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Descriptor]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_dictionary(self, dictionary, **kwargs):  # noqa: E501
        """exports all descriptors from specifies dictionary  # noqa: E501

        By passing the dictionary name, you can get all descriptors of it   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_dictionary(dictionary, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :return: list[Descriptor]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_dictionary_with_http_info(dictionary, **kwargs)  # noqa: E501
        else:
            (data) = self.export_dictionary_with_http_info(dictionary, **kwargs)  # noqa: E501
            return data

    def export_dictionary_with_http_info(self, dictionary, **kwargs):  # noqa: E501
        """exports all descriptors from specifies dictionary  # noqa: E501

        By passing the dictionary name, you can get all descriptors of it   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_dictionary_with_http_info(dictionary, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :return: list[Descriptor]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dictionary']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_dictionary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dictionary' is set
        if ('dictionary' not in params or
                params['dictionary'] is None):
            raise ValueError("Missing the required parameter `dictionary` when calling `export_dictionary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dictionary' in params:
            path_params['dictionary'] = params['dictionary']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/{dictionary}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Descriptor]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_descriptors(self, **kwargs):  # noqa: E501
        """imports descriptors of several directories  # noqa: E501

        Imports descriptors of several directories to the system   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_descriptors(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Descriptor] body: Array of descriptors to import
        :param bool replace: replaces whole database
        :return: ReplyImported
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_descriptors_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.import_descriptors_with_http_info(**kwargs)  # noqa: E501
            return data

    def import_descriptors_with_http_info(self, **kwargs):  # noqa: E501
        """imports descriptors of several directories  # noqa: E501

        Imports descriptors of several directories to the system   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_descriptors_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Descriptor] body: Array of descriptors to import
        :param bool replace: replaces whole database
        :return: ReplyImported
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'replace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_descriptors" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'replace' in params:
            query_params.append(('replace', params['replace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReplyImported',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_dictionary(self, dictionary, **kwargs):  # noqa: E501
        """imports a dictionary  # noqa: E501

        Imports whole dictionary to the system. Ignores data field 'dictionary'    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_dictionary(dictionary, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :param list[Descriptor] body: Array of descriptors to import
        :param bool replace: replaces existing dictionary
        :return: ReplyImported
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_dictionary_with_http_info(dictionary, **kwargs)  # noqa: E501
        else:
            (data) = self.import_dictionary_with_http_info(dictionary, **kwargs)  # noqa: E501
            return data

    def import_dictionary_with_http_info(self, dictionary, **kwargs):  # noqa: E501
        """imports a dictionary  # noqa: E501

        Imports whole dictionary to the system. Ignores data field 'dictionary'    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_dictionary_with_http_info(dictionary, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :param list[Descriptor] body: Array of descriptors to import
        :param bool replace: replaces existing dictionary
        :return: ReplyImported
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dictionary', 'body', 'replace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_dictionary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dictionary' is set
        if ('dictionary' not in params or
                params['dictionary'] is None):
            raise ValueError("Missing the required parameter `dictionary` when calling `import_dictionary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dictionary' in params:
            path_params['dictionary'] = params['dictionary']  # noqa: E501

        query_params = []
        if 'replace' in params:
            query_params.append(('replace', params['replace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/{dictionary}/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReplyImported',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_descriptor(self, dictionary, key, **kwargs):  # noqa: E501
        """replaces a descriptor  # noqa: E501

        By passing the key or alternate key, you can replace the descriptor   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_descriptor(dictionary, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :param str key: Descriptor key or alternate key (required)
        :param Descriptor body: Descriptor to replace
        :return: Descriptor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_descriptor_with_http_info(dictionary, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_descriptor_with_http_info(dictionary, key, **kwargs)  # noqa: E501
            return data

    def put_descriptor_with_http_info(self, dictionary, key, **kwargs):  # noqa: E501
        """replaces a descriptor  # noqa: E501

        By passing the key or alternate key, you can replace the descriptor   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_descriptor_with_http_info(dictionary, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: Dictionary identifier (required)
        :param str key: Descriptor key or alternate key (required)
        :param Descriptor body: Descriptor to replace
        :return: Descriptor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dictionary', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_descriptor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dictionary' is set
        if ('dictionary' not in params or
                params['dictionary'] is None):
            raise ValueError("Missing the required parameter `dictionary` when calling `put_descriptor`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_descriptor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dictionary' in params:
            path_params['dictionary'] = params['dictionary']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/{dictionary}/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Descriptor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
