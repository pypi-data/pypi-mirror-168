# coding: utf-8

"""
    SYSNET Managed Dictionaries API

    REST API of the SYSNET managed dictionaries (code lists) system.  Primarily designed for the CITES Registry.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReplyImported(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count_added': 'int',
        'count_replaced': 'int',
        'count_rejected': 'int',
        'added': 'list[ImportedItem]',
        'replaced': 'list[ImportedItem]',
        'rejected': 'list[ImportedItem]'
    }

    attribute_map = {
        'count_added': 'count_added',
        'count_replaced': 'count_replaced',
        'count_rejected': 'count_rejected',
        'added': 'added',
        'replaced': 'replaced',
        'rejected': 'rejected'
    }

    def __init__(self, count_added=None, count_replaced=None, count_rejected=None, added=None, replaced=None, rejected=None):  # noqa: E501
        """ReplyImported - a model defined in Swagger"""  # noqa: E501
        self._count_added = None
        self._count_replaced = None
        self._count_rejected = None
        self._added = None
        self._replaced = None
        self._rejected = None
        self.discriminator = None
        if count_added is not None:
            self.count_added = count_added
        if count_replaced is not None:
            self.count_replaced = count_replaced
        if count_rejected is not None:
            self.count_rejected = count_rejected
        if added is not None:
            self.added = added
        if replaced is not None:
            self.replaced = replaced
        if rejected is not None:
            self.rejected = rejected

    @property
    def count_added(self):
        """Gets the count_added of this ReplyImported.  # noqa: E501

        počet nově přidaných deskriptorů  # noqa: E501

        :return: The count_added of this ReplyImported.  # noqa: E501
        :rtype: int
        """
        return self._count_added

    @count_added.setter
    def count_added(self, count_added):
        """Sets the count_added of this ReplyImported.

        počet nově přidaných deskriptorů  # noqa: E501

        :param count_added: The count_added of this ReplyImported.  # noqa: E501
        :type: int
        """

        self._count_added = count_added

    @property
    def count_replaced(self):
        """Gets the count_replaced of this ReplyImported.  # noqa: E501

        počet nahrazených deskriptorů  # noqa: E501

        :return: The count_replaced of this ReplyImported.  # noqa: E501
        :rtype: int
        """
        return self._count_replaced

    @count_replaced.setter
    def count_replaced(self, count_replaced):
        """Sets the count_replaced of this ReplyImported.

        počet nahrazených deskriptorů  # noqa: E501

        :param count_replaced: The count_replaced of this ReplyImported.  # noqa: E501
        :type: int
        """

        self._count_replaced = count_replaced

    @property
    def count_rejected(self):
        """Gets the count_rejected of this ReplyImported.  # noqa: E501

        počet zamítnutých deskriptorů  # noqa: E501

        :return: The count_rejected of this ReplyImported.  # noqa: E501
        :rtype: int
        """
        return self._count_rejected

    @count_rejected.setter
    def count_rejected(self, count_rejected):
        """Sets the count_rejected of this ReplyImported.

        počet zamítnutých deskriptorů  # noqa: E501

        :param count_rejected: The count_rejected of this ReplyImported.  # noqa: E501
        :type: int
        """

        self._count_rejected = count_rejected

    @property
    def added(self):
        """Gets the added of this ReplyImported.  # noqa: E501


        :return: The added of this ReplyImported.  # noqa: E501
        :rtype: list[ImportedItem]
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this ReplyImported.


        :param added: The added of this ReplyImported.  # noqa: E501
        :type: list[ImportedItem]
        """

        self._added = added

    @property
    def replaced(self):
        """Gets the replaced of this ReplyImported.  # noqa: E501


        :return: The replaced of this ReplyImported.  # noqa: E501
        :rtype: list[ImportedItem]
        """
        return self._replaced

    @replaced.setter
    def replaced(self, replaced):
        """Sets the replaced of this ReplyImported.


        :param replaced: The replaced of this ReplyImported.  # noqa: E501
        :type: list[ImportedItem]
        """

        self._replaced = replaced

    @property
    def rejected(self):
        """Gets the rejected of this ReplyImported.  # noqa: E501


        :return: The rejected of this ReplyImported.  # noqa: E501
        :rtype: list[ImportedItem]
        """
        return self._rejected

    @rejected.setter
    def rejected(self, rejected):
        """Sets the rejected of this ReplyImported.


        :param rejected: The rejected of this ReplyImported.  # noqa: E501
        :type: list[ImportedItem]
        """

        self._rejected = rejected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReplyImported, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplyImported):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
