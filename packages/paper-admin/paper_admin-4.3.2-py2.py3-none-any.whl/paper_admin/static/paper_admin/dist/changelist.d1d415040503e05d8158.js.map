{"version":3,"file":"changelist.d1d415040503e05d8158.js","mappings":"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","sources":["webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-pagination/paper-pagination.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/js/components/sortable_table/ListTree.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/js/components/sortable_table/SortableTable.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-actions/paper-actions.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-search-form/paper-search-form.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/filters/date-range-filter/date-range-filter.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/filters/select2-filter/select2-filter.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/js/changelist.js"],"sourcesContent":["// Ctrl + Arrows navigation\nwindow.addEventListener(\"keydown\", event => {\n    if (event.defaultPrevented) {\n        return; // Do nothing if the event was already processed\n    }\n\n    if (event.ctrlKey) {\n        const pagination = document.querySelector(\".paper-pagination\");\n        if (!pagination) {\n            return;\n        }\n\n        switch (event.key) {\n            case \"Left\":\n            case \"ArrowLeft\":\n                pagination.querySelector('.page-link[aria-label=\"Previous\"]').click();\n                break;\n            case \"Right\":\n            case \"ArrowRight\":\n                pagination.querySelector('.page-link[aria-label=\"Next\"]').click();\n                break;\n            default:\n                // Quit when this doesn't handle the key event.\n                return;\n        }\n\n        // Cancel the default action to avoid it being handled twice\n        event.preventDefault();\n    }\n});\n","/**\n * Представление списка DOM-элементов в виде дерева.\n * Каждый DOM-элемент должен иметь data-атрибуты: id, parent.\n * Каждый дочерний узел должен идти после родителя.\n * @module ListTree\n */\n\n/**\n * @typedef {Object} module:ListTree.ListTreeNode\n * @property {Number}       pk\n * @property {Number}       parent\n * @property {HTMLElement}  element\n * @property {Number[]}     childs\n */\n\n/**\n * Конструктор объектов ListTree.\n * @param {NodeList|Element[]} elements\n * @constructor\n */\nfunction ListTree(elements) {\n    this._buildTree(elements);\n}\n\n/**\n * Создание узла дерева.\n * @param {HTMLElement} child\n * @returns {module:ListTree.ListTreeNode}\n * @private\n */\nListTree.prototype._createNode = function (child) {\n    const dataset = child.dataset;\n    return {\n        pk: parseInt(dataset.id),\n        parent: parseInt(dataset.parent),\n        element: child,\n        childs: []\n    };\n};\n\n/**\n * Добавление узла дерева в карту, для быстрого поиска по ID.\n * @param {module:ListTree.ListTreeNode} node\n * @returns {Boolean}\n * @private\n */\nListTree.prototype._addNode = function (node) {\n    if (node && typeof node.pk === \"number\") {\n        this._nodes[node.pk] = node;\n        if (isNaN(node.parent)) {\n            this._roots.push(node);\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Получение узла по ID.\n * @param {Number} pk\n * @returns {module:ListTree.ListTreeNode}\n */\nListTree.prototype.getNode = function (pk) {\n    if (this._nodes === null) {\n        throw new Error(\"tree is empty\");\n    }\n    if (!(pk in this._nodes)) {\n        throw new Error(`node ${pk} not found`);\n    }\n    return this._nodes[pk];\n};\n\n/**\n * Построение дерева из элементов.\n * @param {Element[]} elements\n * @private\n */\nListTree.prototype._buildTree = function (elements) {\n    const stack = [];\n\n    this._nodes = {};\n    this._roots = [];\n    elements.forEach(\n        function (elem) {\n            const node = this._createNode(elem);\n            this._addNode(node);\n\n            while (stack.length) {\n                const stack_node = stack[0];\n                if (node.parent === stack_node.pk) {\n                    stack_node.childs.push(node.pk);\n                    stack.unshift(node);\n                    return;\n                }\n                stack.shift();\n            }\n\n            stack.unshift(node);\n        }.bind(this)\n    );\n};\n\n/**\n * Получение корневых элементов.\n * @returns {Element[]}\n */\nListTree.prototype.getRoots = function () {\n    if (this._roots === null) {\n        throw new Error(\"tree is empty\");\n    }\n    return this._roots.map(\n        function (root_node) {\n            return root_node.element;\n        }.bind(this)\n    );\n};\n\n/**\n * Получение всех потомков узла.\n * @param {Number} pk\n * @returns {Element[]}\n */\nListTree.prototype.getDescendants = function (pk) {\n    const node = this.getNode(pk);\n    return node.childs.reduce(\n        function (result, child_pk) {\n            const child_node = this.getNode(child_pk);\n            if (child_node) {\n                result.push(child_node.element);\n                result = result.concat(this.getDescendants(child_pk));\n            }\n            return result;\n        }.bind(this),\n        []\n    );\n};\n\nexport default ListTree;\n","/**\n * Таблица с возможностью сортировки строк.\n * Каждая строка должна иметь атрибуты data-id и data-order-value.\n * В случае, если строки представляют дерево, то еще необходим атрибут data-parent.\n * @module SortableTable\n */\n\n/**\n * @typedef {Object} module:SortableTable.SortableTableOptions\n * @property {String}  url\n * @property {Boolean} [tree]\n * @property {String}  [handler]\n * @property {String}  [disabledClass]\n */\n\nimport Sortable from \"sortablejs\";\nimport ListTree from \"js/components/sortable_table/ListTree.js\";\n\n/**\n * Конструктор объектов SortableTable.\n * @param {Element} table\n * @param {module:SortableTable.SortableTableOptions} [options]\n * @constructor\n */\nfunction SortableTable(table, options) {\n    /** @type {module:SortableTable.SortableTableOptions} */\n    this.opts = Object.assign(\n        {\n            url: null,\n            tree: false,\n            handler: \".handler\",\n            disabledClass: \"disabled\"\n        },\n        options\n    );\n\n    /** @type {Element} */\n    this.table = table;\n\n    /** @type {Element} */\n    this.tbody = table.querySelector(\"tbody\");\n    if (!this.tbody) {\n        throw new Error(\"table body not found\");\n    }\n\n    /** @type {?ListTree} */\n    this.tree = null;\n\n    this._createSortable();\n}\n\n/**\n * Инициализация плагина сортировки.\n * @private\n */\nSortableTable.prototype._createSortable = function () {\n    return Sortable.create(this.tbody, {\n        animation: 0,\n        draggable: \"tr\",\n        handle: this.opts.handler,\n        filter: function (event, row, instance) {\n            if (row.classList.contains(this.opts.disabledClass)) {\n                return true;\n            }\n\n            const handler = row.querySelector(this.opts.handler);\n            if (handler && handler.classList.contains(this.opts.disabledClass)) {\n                return true;\n            }\n        }.bind(this),\n        ghostClass: \"sortable-ghost\",\n        onStart: this._onStart.bind(this),\n        onMove: this._onMove.bind(this),\n        onEnd: this._onEnd.bind(this)\n    });\n};\n\n/**\n * Обработчик события начала перетаскивания.\n * @param evt\n * @private\n */\nSortableTable.prototype._onStart = function (evt) {\n    const rows = this.tbody.querySelectorAll(\"tr\");\n\n    if (this.opts.tree) {\n        this.tree = new ListTree(rows);\n    }\n\n    // блокируем все узлы, кроме соседних\n    const item_parentId = parseInt(evt.item.dataset.parent);\n    rows.forEach(\n        function (row) {\n            const parentId = parseInt(row.dataset.parent);\n            if ((!isNaN(parentId) || !isNaN(item_parentId)) && parentId !== item_parentId) {\n                row.classList.add(this.opts.disabledClass);\n            }\n        }.bind(this)\n    );\n};\n\n/**\n * Обработчик события перетаскивания.\n * @param evt\n * @returns {Boolean}\n * @private\n */\nSortableTable.prototype._onMove = function (evt) {\n    return !evt.related.classList.contains(this.opts.disabledClass);\n};\n\n/**\n * Обработчик события завершения перетаскивания.\n * @param evt\n * @private\n */\nSortableTable.prototype._onEnd = function (evt) {\n    // снимаем блокировку со всех узлов\n    const rows = this.tbody.querySelectorAll(\"tr\");\n    rows.forEach(row => {\n        row.classList.remove(this.opts.disabledClass);\n    });\n\n    const moved = this._getMovedRows(evt);\n    if (!moved.length || moved.length === 1) {\n        return;\n    }\n\n    this._normalizeTable(evt, moved);\n\n    const map = this._createOrderMap(evt, moved);\n\n    // блокировка областей сортировки на время выполнения запроса\n    const handlers = this.tbody.querySelectorAll(this.opts.handler);\n    handlers.forEach(handler => {\n        handler.classList.add(this.opts.disabledClass);\n    });\n\n    // отправка запроса на сервер\n    this._sendRequest(map).then(() => {\n        // снятие блокировки\n        handlers.forEach(handler => {\n            handler.classList.remove(this.opts.disabledClass);\n        });\n    });\n};\n\n/**\n * Получение строк, чей порядок изменился.\n * @param evt\n * @returns {Element[]}\n * @private\n */\nSortableTable.prototype._getMovedRows = function (evt) {\n    const sliceStart = Math.min(evt.oldIndex, evt.newIndex);\n    const sliceEnd = Math.max(evt.oldIndex, evt.newIndex);\n    const rows = this.tbody.querySelectorAll(\"tr\");\n    let slice = Array.prototype.slice.call(rows, sliceStart, sliceEnd + 1);\n    if (this.tree) {\n        // пропускаем узлы, не являющиеся соседними\n        const pk = parseInt(evt.item.dataset.id);\n        const node = this.tree.getNode(pk);\n        slice = slice.filter(row => {\n            return parseInt(row.dataset.parent) === node.parent;\n        });\n    }\n    return slice;\n};\n\n/**\n * Создание карты новых значений сортировки строк.\n * @param evt\n * @param {Element[]} rows\n * @returns {Object}\n * @private\n */\nSortableTable.prototype._createOrderMap = function (evt, rows) {\n    const pk_array = [];\n    const order_array = [];\n    rows.forEach(row => {\n        const handle = row.querySelector(this.opts.handler);\n        if (handle) {\n            pk_array.push(parseInt(row.dataset.id));\n            order_array.push(parseInt(row.dataset.orderValue));\n        }\n    });\n\n    // циклический сдвиг значений сортировки\n    const movedDown = evt.oldIndex < evt.newIndex;\n    if (movedDown) {\n        order_array.unshift(order_array.pop());\n    } else {\n        order_array.push(order_array.shift());\n    }\n\n    return pk_array.reduce(\n        (result, pk, i) => {\n            result[pk] = order_array[i];\n\n            // обновляем атрибут data-order-value\n            const row = this.tbody.querySelector(\"tr[data-id='\" + pk + \"']\");\n            row.setAttribute(\"data-order-value\", order_array[i]);\n\n            return result;\n        },\n        {}\n    );\n};\n\n/**\n * Нормализация таблицы.\n * Все дочерние строки перемещаются под своего родителя.\n * Без этого метода может случиться ситуация, когда элемент\n * был перемещен между своим соседом и его детьми.\n * @param evt\n * @param {Element[]} moved\n * @private\n */\nSortableTable.prototype._normalizeTable = function (evt, moved) {\n    if (this.tree) {\n        const pk = parseInt(evt.item.dataset.id);\n        const node = this.tree.getNode(pk);\n        const prev = evt.item.previousElementSibling;\n        const next = evt.item.nextElementSibling;\n        const parents = moved.slice();\n        if (prev && next) {\n            // если предыдущая строка - сосед, а следующая - ребенок соседа,\n            // то сосед должен быть в списке нормализации.\n            const isPrevSibling = parseInt(prev.dataset.parent) === node.parent;\n            const isNextChild = parseInt(next.dataset.parent) === parseInt(prev.dataset.id);\n            if (isPrevSibling && isNextChild && !parents.includes(prev)) {\n                parents.unshift(prev);\n            }\n        }\n\n        // перенос детей под родителя\n        parents.forEach(parent => {\n            const pk = parseInt(parent.dataset.id);\n            const childs = this.tree.getDescendants(pk);\n            Element.prototype.after.apply(parent, childs);\n        });\n    }\n};\n\n/**\n * Отправка новых значений сортировки на сервер.\n * @param {Object} data\n * @returns {Promise<Response>}\n * @private\n */\nSortableTable.prototype._sendRequest = function (data) {\n    return fetch(this.opts.url, {\n        method: \"POST\",\n        credentials: \"same-origin\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n    }).then(response => {\n        if (!response.ok) {\n            const error = new Error(`${response.status} ${response.statusText}`);\n            error.response = response;\n            throw error;\n        }\n    });\n};\n\nexport default SortableTable;\n","/*global gettext, interpolate, ngettext*/\n\nimport \"./paper-actions.scss\";\n\nconst TOGGLE_ALL_ID = \"action-toggle\";\nconst CHECKBOX_CLASS = \"action-select\";\nconst CHECKBOX_LABEL_SELECTOR = \".action-checkbox .custom-control\";\nconst COUNTER_CLASS = \"paper-actions__counter\";\nconst QUESTION_CLASS = \"paper-actions__question\";\nconst ALL_CLASS = \"paper-actions__all\";\nconst CLEAR_CLASS = \"paper-actions__clear\";\nconst ACROSS_INPUT = \".paper-actions__select_across input.select-across\";\n\nfunction initActions(inputs) {\n    let lastChecked = null;\n    const table = document.getElementById(\"result_list\");\n    const allToggleInput = document.getElementById(TOGGLE_ALL_ID);\n\n    // клик на чекбокс \"выбрать все\"\n    allToggleInput.addEventListener(\"change\", () => {\n        const rows = inputs.map(input => input.closest(\"tr\"));\n        toggleRows(rows, allToggleInput.checked);\n        updateCounter(inputs);\n    });\n\n    // пользовательское событие выделения ряда таблицы\n    table.addEventListener(\"select\", event => {\n        const target = event.target;\n        if (target.tagName !== \"TR\" || target.closest(\"table\") !== table) {\n            return;\n        }\n\n        const state = Boolean(event.detail.state);\n        const checkbox = target.querySelector(`.${CHECKBOX_CLASS}`);\n        checkbox.checked = state;\n        target.classList.toggle(\"selected\", state);\n\n        // все ли чекбоксы выделены\n        allToggleInput.checked = inputs.find(input => !input.checked) == null;\n    });\n\n    table.addEventListener(\"click\", event => {\n        const target = event.target;\n\n        // клик вне строк таблицы\n        const row = target.closest(\"tr\");\n        if (!row) {\n            return;\n        }\n\n        const checkbox_clicked = target.closest(CHECKBOX_LABEL_SELECTOR);\n        const checkbox = row.querySelector(`.${CHECKBOX_CLASS}`);\n\n        if (event.shiftKey && lastChecked) {\n            // массовое выделение (через Shift)\n            const lastIndex = inputs.indexOf(lastChecked);\n            const targetIndex = inputs.indexOf(checkbox);\n            const startIndex = Math.min(lastIndex, targetIndex);\n            const endIndex = Math.max(lastIndex, targetIndex);\n            const input_slice = inputs.slice(startIndex, endIndex + 1);\n            const rows = input_slice.map(input => input.closest(\"tr\"));\n            toggleRows(rows, lastChecked.checked);\n        } else if (checkbox_clicked || (event.ctrlKey && !event.shiftKey)) {\n            // клик на чекбокс или на строку через Ctrl\n            lastChecked = checkbox;\n            toggleRows([row], !checkbox.checked);\n        }\n\n        updateCounter(inputs);\n    });\n\n    // отмена выделения текста при клике с удержанным Shift\n    table.addEventListener(\"mousedown\", event => {\n        const target = event.target;\n        if (event.shiftKey && (target.tagName === \"TD\" || target.tagName === \"TH\")) {\n            event.preventDefault();\n        }\n    });\n\n    // выбор всех записей таблицы\n    document.addEventListener(\"click\", event => {\n        const target = event.target;\n        if (target.tagName === \"A\" && target.closest(`.${QUESTION_CLASS}`)) {\n            event.preventDefault();\n            selectAcross();\n        }\n    });\n\n    // очистка выбора\n    document.addEventListener(\"click\", event => {\n        const target = event.target;\n        if (target.tagName === \"A\" && target.closest(`.${CLEAR_CLASS}`)) {\n            event.preventDefault();\n            allToggleInput.checked = false;\n            const rows = inputs.map(input => input.closest(\"tr\"));\n            toggleRows(rows, false);\n            clearAcross(inputs);\n            updateCounter(inputs);\n        }\n    });\n\n    protectEditForm();\n}\n\n/**\n * Требование подтверждения выполнения действия, если в форме были изменения.\n */\nfunction protectEditForm() {\n    let list_editable_changed = false;\n    const form = document.getElementById(\"changelist-form\");\n\n    form.addEventListener(\"change\", event => {\n        const target = event.target;\n        if (target.tagName === \"INPUT\") {\n            if (target.closest(`.${CHECKBOX_CLASS}`) || target.id === TOGGLE_ALL_ID) {\n                // nothing\n            } else {\n                list_editable_changed = true;\n            }\n        } else if (target.tagName === \"SELECT\") {\n            if (target.closest(\".action-action\")) {\n                // nothing\n            } else {\n                list_editable_changed = true;\n            }\n        } else {\n            list_editable_changed = true;\n        }\n    });\n\n    document.addEventListener(\"click\", event => {\n        const target = event.target;\n        const action_button = target.closest('[name=\"index\"]');\n        if (action_button && list_editable_changed) {\n            const agree = confirm(\n                gettext(\n                    \"You have unsaved changes on individual editable fields. If you run an action, your unsaved changes will be lost.\"\n                )\n            );\n            if (!agree) {\n                event.preventDefault();\n            }\n        }\n    });\n\n    document.addEventListener(\"click\", event => {\n        const target = event.target;\n        const save_button = target.closest('[name=\"_save\"]');\n\n        const action_selects = document.querySelectorAll('.actions select[name=\"action\"]');\n        const action_changed = !Array.prototype.every.call(action_selects, select => {\n            return !select.value;\n        });\n\n        if (save_button && action_changed) {\n            let apply;\n            if (list_editable_changed) {\n                apply = confirm(\n                    gettext(\n                        \"You have selected an action, but you haven't saved your changes to individual fields yet. Please click OK to save. You'll need to re-run the action.\"\n                    )\n                );\n            } else {\n                apply = confirm(\n                    gettext(\n                        \"You have selected an action, and you haven't made any changes on individual fields. You're probably looking for the Go button rather than the Save button.\"\n                    )\n                );\n            }\n            if (!apply) {\n                event.preventDefault();\n            }\n        }\n    });\n}\n\n/**\n * Установка/сброс галочки в чекбоксах.\n * @param {HTMLTableRowElement[]} rows\n * @param {Boolean} checked\n */\nfunction toggleRows(rows, checked) {\n    rows.forEach(row => {\n        if (row && row.tagName === \"TR\") {\n            row.dispatchEvent(\n                new CustomEvent(\"select\", {\n                    bubbles: true,\n                    cancelable: true,\n                    detail: {\n                        state: checked\n                    }\n                })\n            );\n        }\n    });\n}\n\nfunction updateCounter(inputs) {\n    const selected = inputs.reduce((sum, input) => sum + (input.checked ? 1 : 0), 0);\n    const counters = document.querySelectorAll(`.${COUNTER_CLASS}`);\n    counters.forEach(counter => {\n        counter.innerHTML = interpolate(\n            ngettext(\"%(sel)s of %(cnt)s selected\", \"%(sel)s of %(cnt)s selected\", selected),\n            {\n                sel: selected,\n                cnt: counter.dataset.actionsIcnt\n            },\n            true\n        );\n    });\n\n    if (selected === inputs.length) {\n        showQuestion();\n    } else {\n        clearAcross(inputs);\n    }\n}\n\n/**\n * Показ ссылки \"выбрать всё\"\n */\nfunction showQuestion() {\n    const questions = document.querySelectorAll(`.${QUESTION_CLASS}`);\n    questions.forEach(question => {\n        question.hidden = false;\n    });\n}\n\n/**\n * Установка значения input-элементу для выполнения действия над всеми элементами\n * @param {Boolean} value\n */\nfunction setAcrossInput(value) {\n    const acrossInput = document.querySelectorAll(ACROSS_INPUT);\n    acrossInput.forEach(input => {\n        input.value = Number(value);\n    });\n}\n\nfunction selectAcross() {\n    setAcrossInput(true);\n\n    const counters = document.querySelectorAll(`.${COUNTER_CLASS}`);\n    counters.forEach(counter => {\n        counter.hidden = true;\n    });\n\n    const allContainers = document.querySelectorAll(`.${ALL_CLASS}`);\n    allContainers.forEach(container => {\n        container.hidden = false;\n    });\n\n    const questions = document.querySelectorAll(`.${QUESTION_CLASS}`);\n    questions.forEach(question => {\n        question.hidden = true;\n    });\n\n    const clear_buttons = document.querySelectorAll(`.${CLEAR_CLASS}`);\n    clear_buttons.forEach(clear_button => {\n        clear_button.hidden = false;\n    });\n}\n\nfunction clearAcross(inputs) {\n    setAcrossInput(false);\n\n    const counters = document.querySelectorAll(`.${COUNTER_CLASS}`);\n    counters.forEach(counter => {\n        counter.hidden = false;\n    });\n\n    const allContainers = document.querySelectorAll(`.${ALL_CLASS}`);\n    allContainers.forEach(container => {\n        container.hidden = true;\n    });\n\n    const selected = inputs.reduce((sum, input) => sum + (input.checked ? 1 : 0), 0);\n    const questions = document.querySelectorAll(`.${QUESTION_CLASS}`);\n    questions.forEach(question => {\n        question.hidden = selected !== inputs.length;\n    });\n\n    const clear_buttons = document.querySelectorAll(`.${CLEAR_CLASS}`);\n    clear_buttons.forEach(clear_button => {\n        clear_button.hidden = true;\n    });\n}\n\nconst checkboxes = document.querySelectorAll(`.${CHECKBOX_CLASS}`);\nif (checkboxes.length) {\n    initActions(Array.from(checkboxes));\n}\n","import \"./paper-search-form.scss\";\n\n// Выделение текста в поле поиска при фокусе\nconst form = document.querySelector(\".paper-search-form\");\nconst input = form && form.querySelector(\".form-control\");\ninput &&\n    input.addEventListener(\"focus\", () => {\n        input.select();\n    });\n","import { dateFormats, flatpickr } from \"components/flatpickr\";\nimport getPossibleLocales from \"js/utilities/locale.js\";\nimport Widget from \"js/utilities/widget.js\";\n\nclass DateRangeFilter extends Widget {\n    constructor(options) {\n        super();\n\n        this.opts = Object.assign(\n            {\n                altInput: true,\n                locale: this._getLocale(),\n                dateFormat: this._getDateFormat()\n            },\n            options\n        );\n    }\n\n    _init(element) {\n        const dateStart = element.querySelector(\"[data-range-start]\");\n        const dateStartConfig = Object.assign({}, this.opts);\n        flatpickr(dateStart, dateStartConfig);\n\n        const dateEnd = element.querySelector(\"[data-range-end]\");\n        const dateEndConfig = Object.assign({}, this.opts);\n        flatpickr(dateEnd, dateEndConfig);\n\n        element.addEventListener(\"click\", event => {\n            const button = event.target.closest(\"[data-today]\");\n            if (button) {\n                const inputGroup = button.closest(\".input-group\");\n                const input = inputGroup && inputGroup.querySelector(\"input\");\n                if (input && input._flatpickr) {\n                    input._flatpickr.setDate(\"today\");\n                }\n            }\n        });\n    }\n\n    _destroy(element) {\n        const dateStart = element.querySelector(\"[data-range-start]\");\n        if (dateStart._flatpickr) {\n            dateStart._flatpickr.destroy();\n        }\n\n        const dateEnd = element.querySelector(\"[data-range-end]\");\n        if (dateEnd._flatpickr) {\n            dateEnd._flatpickr.destroy();\n        }\n    }\n\n    _getLocale() {\n        for (const locale of getPossibleLocales()) {\n            if (flatpickr.l10ns[locale]) {\n                return locale;\n            }\n        }\n        return \"default\";\n    }\n\n    _getDateFormat() {\n        for (const locale of getPossibleLocales()) {\n            if (dateFormats[locale]) {\n                return dateFormats[locale];\n            }\n        }\n        return \"Y-m-d\";\n    }\n}\n\nconst widget = new DateRangeFilter();\nwidget.observe(\".paper-date-range-filter\");\nwidget.initAll(\".paper-date-range-filter\");\n","import { Select2Widget } from \"components/select2\";\n\nconst widget = new Select2Widget({\n    width: \"100%\",\n    allowClear: true,\n    containerCssClass: \"select2-container--small\"\n});\nwidget.observe(\".paper-select2-filter select\");\nwidget.initAll(\".paper-select2-filter select\");\n","import SortableTable from \"js/components/sortable_table/SortableTable.js\";\nimport { Select2Widget } from \"components/select2\";\nimport \"bem/paper-actions/paper-actions.js\";\nimport \"bem/paper-filter/paper-filter.js\";\nimport \"bem/paper-pagination/paper-pagination.js\";\nimport \"bem/paper-search-form/paper-search-form.js\";\n\n// -----------------\n//  Filters\n// -----------------\nimport \"filters/date-range-filter\";\nimport \"filters/select2-filter\";\n\n// -----------------\n//  CSS\n// -----------------\nimport \"css/changelist.scss\";\n\n// Select2 для выпадающих списков\nconst select2_changelist = new Select2Widget({\n    width: \"\",\n    allowClear: true,\n    containerCssClass: \"select2-container--small\"\n});\nselect2_changelist.observe(\".paper-table .select-field select\");\nselect2_changelist.initAll(\".paper-table .select-field select\");\n\nconst select2_action = new Select2Widget({\n    allowClear: true,\n    containerCssClass: \"select2-container--small\",\n    minimumResultsForSearch: Infinity\n});\nselect2_action.observe(\".paper-actions select\");\nselect2_action.initAll(\".paper-actions select\");\n\n// Сортируемые таблицы\nconst table = document.getElementById(\"result_list\");\nif (table && table.classList.contains(\"paper-table--sortable\")) {\n    new SortableTable(table, {\n        url: table.dataset.orderUrl,\n        tree: table.classList.contains(\"paper-table--tree\"),\n        handler: \".paper-table__sort-handler\"\n    });\n}\n"],"names":["window","addEventListener","event","defaultPrevented","ctrlKey","pagination","document","querySelector","key","click","preventDefault","ListTree","elements","this","_buildTree","prototype","_createNode","child","dataset","pk","parseInt","id","parent","element","childs","_addNode","node","_nodes","isNaN","_roots","push","getNode","Error","stack","forEach","elem","length","stack_node","unshift","shift","bind","getRoots","map","root_node","getDescendants","reduce","result","child_pk","child_node","concat","SortableTable","table","options","opts","Object","assign","url","tree","handler","disabledClass","tbody","_createSortable","Sortable","animation","draggable","handle","filter","row","instance","classList","contains","ghostClass","onStart","_onStart","onMove","_onMove","onEnd","_onEnd","evt","rows","querySelectorAll","item_parentId","item","parentId","add","related","remove","moved","_getMovedRows","_normalizeTable","_createOrderMap","handlers","_sendRequest","then","sliceStart","Math","min","oldIndex","newIndex","sliceEnd","max","slice","Array","call","pk_array","order_array","orderValue","pop","i","setAttribute","prev","previousElementSibling","next","nextElementSibling","parents","isPrevSibling","isNextChild","includes","Element","after","apply","data","fetch","method","credentials","headers","body","JSON","stringify","response","ok","error","status","statusText","TOGGLE_ALL_ID","COUNTER_CLASS","QUESTION_CLASS","ALL_CLASS","CLEAR_CLASS","toggleRows","checked","tagName","dispatchEvent","CustomEvent","bubbles","cancelable","detail","state","updateCounter","inputs","selected","sum","input","counter","innerHTML","interpolate","ngettext","sel","cnt","actionsIcnt","question","hidden","clearAcross","setAcrossInput","value","Number","container","clear_button","checkboxes","lastChecked","getElementById","allToggleInput","closest","target","Boolean","toggle","find","checkbox_clicked","checkbox","shiftKey","lastIndex","indexOf","targetIndex","startIndex","endIndex","list_editable_changed","confirm","gettext","save_button","action_selects","action_changed","every","select","protectEditForm","initActions","from","form","DateRangeFilter","Widget","constructor","super","altInput","locale","_getLocale","dateFormat","_getDateFormat","_init","dateStart","dateStartConfig","flatpickr","dateEnd","dateEndConfig","button","inputGroup","_flatpickr","setDate","_destroy","destroy","getPossibleLocales","dateFormats","widget","observe","initAll","Select2Widget","width","allowClear","containerCssClass","select2_changelist","select2_action","minimumResultsForSearch","Infinity","orderUrl"],"sourceRoot":""}