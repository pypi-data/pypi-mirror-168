{
    "id": "bundle--6e45630a-8773-434d-8c1a-2c275c9c273d",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the \"script\" tag using the alternate forms of \"Script\" or \"ScRiPt\" may bypass filters where \"script\" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",
            "external_references": [
                {
                    "external_id": "CAPEC-199",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/199.html"
                },
                {
                    "external_id": "CWE-87",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/87.html"
                },
                {
                    "description": "OWASP Cheatsheets, The Open Web Application Security Project (OWASP)",
                    "external_id": "REF-69",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://www.owasp.org/www-community/xss-filter-evasion-cheatsheet"
                },
                {
                    "description": "OWASP Testing Guide (v2), The Open Web Application Security Project (OWASP)",
                    "external_id": "REF-70",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.owasp.org/index.php/Testing_for_Cross_site_scripting"
                },
                {
                    "description": "Non-alphanumeric XSS cheat sheet",
                    "external_id": "REF-71",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://sla.ckers.org/forum/read.php?24,28687"
                },
                {
                    "description": "WASC Threat Classification 2.0, 2010, The Web Application Security Consortium (WASC)",
                    "external_id": "REF-72",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://projects.webappsec.org/Cross-Site+Scripting"
                }
            ],
            "id": "attack-pattern--b703f007-6e24-4365-b5f7-c5d249253b33",
            "modified": "2020-07-30T00:00:00.000Z",
            "name": "XSS Using Alternate Syntax",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--61b17787-fe92-427c-9e6a-6311997d7b2a",
                "attack-pattern--800f8095-99b6-4bb9-8bc6-8b9727201a2f",
                "attack-pattern--b1eef783-daae-494c-a418-cd9ada7cbe8b"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Bypass Protection Mechanism"
                ],
                "Accountability": [
                    "Gain Privileges"
                ],
                "Authentication": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Gain Privileges",
                    "Bypass Protection Mechanism"
                ],
                "Confidentiality": [
                    "Read Data"
                ],
                "Integrity": [
                    "Modify Data"
                ],
                "Non-Repudiation": [
                    "Gain Privileges"
                ]
            },
            "x_capec_example_instances": [
                "\n               <xhtml:p>In this example, the attacker tries to get <script>alert(1)</script> executed by the victim's browser. The target application employs regular expressions to make sure no script is being passed through the application to the web page; such a regular expression could be ((?i)script), and the application would replace all matches by this regex by the empty string. An attacker will then create a special payload to bypass this filter:</xhtml:p>\n               <xhtml:div style=\"margin-left:10px;\" class=\"attack\"><scriscriptpt>alert(1)</scscriptript></xhtml:div>\n               <xhtml:p>when the applications gets this input string, it will replace all \"script\" (case insensitive) by the empty string and the resulting input will be the desired vector by the attacker:</xhtml:p>\n               <xhtml:div style=\"margin-left:10px;\" class=\"result\"><script>alert(1)</script></xhtml:div>\n               <xhtml:p>In this example, we assume that the application needs to write a particular string in a client-side JavaScript context (e.g., <script>HERE</script>). For the attacker to execute the same payload as in the previous example, they would need to send alert(1) if there was no filtering. The application makes use of the following regular expression as filter</xhtml:p>\n               <xhtml:div style=\"margin-left:10px;\" class=\"mitigation\">((\\w+)\\s*\\(.*\\)|alert|eval|function|document)</xhtml:div>\n               <xhtml:p>and replaces all matches by the empty string. For example each occurrence of alert(), eval(), foo() or even the string \"alert\" would be stripped. An attacker will then create a special payload to bypass this filter:</xhtml:p>\n               <xhtml:div style=\"margin-left:10px;\" class=\"attack\">this['al' + 'ert'](1)</xhtml:div>\n               <xhtml:p>when the applications gets this input string, it won't replace anything and this piece of JavaScript has exactly the same runtime meaning as alert(1). The attacker could also have used non-alphanumeric XSS vectors to bypass the filter; for example,</xhtml:p>\n               <xhtml:div style=\"margin-left:10px;\" class=\"attack\">($=[$=[]][(__=!$+$)[_=-~-~-~$]+({}+$)[_/_]+($$=($_=!''+$)[_/_]+$_[+$])])()[__[_/_]+__[_+~$]+$_[_]+$$](_/_)</xhtml:div>\n               <xhtml:p>would be executed by the JavaScript engine like alert(1) is.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Survey the application: </b>Using a browser or an automated tool, an attacker follows all public links on a web site. They record all the links they find.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</td></tr><tr><td>Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</td></tr><tr><td>Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Attempt injection payload variations on input parameters: </b>Possibly using an automated tool, an attacker requests variations on the inputs they surveyed before. They send parameters that include variations of payloads. The payloads are designed to bypass incomplete filtering (e.g., incomplete HTML encoding etc.) and tries many variations of characters injection that would enable the XSS payload. They record all the responses from the server that include unmodified versions of their script.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier. Attempt numerous variations based on form, format, syntax & encoding.</td></tr><tr><td>Use a proxy tool to record results of manual input of XSS probes in known URLs.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Steal session IDs, credentials, page content, etc.: </b>As the attacker succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</td></tr><tr><td>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</td></tr></tbody></table><li> <p> <b>Forceful browsing: </b>When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</td></tr><tr><td>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</td></tr></tbody></table><li> <p> <b>Content spoofing: </b>By manipulating the content, the attacker targets the information that the user would like to get from the website.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "Target client software must allow scripting such as JavaScript."
            ],
            "x_capec_resources_required": [
                "Ability to send HTTP request to a web application."
            ],
            "x_capec_skills_required": {
                "High": "To bypass non trivial filters in the application",
                "Low": "To inject the malicious payload in a web page"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.6"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}