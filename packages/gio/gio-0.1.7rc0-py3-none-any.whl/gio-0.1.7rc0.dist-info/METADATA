Metadata-Version: 2.1
Name: gio
Version: 0.1.7rc0
Summary: Create xarray.DataArrays from various subsurface data formats.
Home-page: https://github.com/agilescientific/gio
Author: Agile Scientific
Author-email: hello@agilescientific.com
Classifier: Intended Audience :: Science/Research
Classifier: Development Status :: 3 - Alpha
Classifier: Natural Language :: English
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: AUTHORS.md
Requires-Dist: scipy
Requires-Dist: xarray
Requires-Dist: matplotlib
Requires-Dist: shapely
Requires-Dist: zmapio
Requires-Dist: unmap
Provides-Extra: dev
Requires-Dist: build ; extra == 'dev'
Requires-Dist: pytest ; extra == 'dev'
Requires-Dist: pytest-cov ; extra == 'dev'
Requires-Dist: sphinx ; extra == 'dev'
Requires-Dist: sphinxcontrib-apidoc ; extra == 'dev'
Requires-Dist: myst-nb ; extra == 'dev'
Requires-Dist: furo ; extra == 'dev'
Requires-Dist: geopandas ; extra == 'dev'
Requires-Dist: requests ; extra == 'dev'
Provides-Extra: docs
Requires-Dist: sphinx ; extra == 'docs'
Requires-Dist: sphinxcontrib-apidoc ; extra == 'docs'
Requires-Dist: myst-nb ; extra == 'docs'
Requires-Dist: furo ; extra == 'docs'
Requires-Dist: requests ; extra == 'docs'
Provides-Extra: geopandas
Requires-Dist: geopandas ; extra == 'geopandas'
Provides-Extra: test
Requires-Dist: pytest ; extra == 'test'
Requires-Dist: pytest-cov ; extra == 'test'
Requires-Dist: requests ; extra == 'test'

# gio

[![Tests](https://github.com/agilescientific/gio/actions/workflows/build-test.yml/badge.svg)](https://github.com/agilescientific/gio/actions/workflows/build-test.yml)
[![Build docs](https://github.com/agilescientific/gio/actions/workflows/build-docs.yml/badge.svg)](https://github.com/agilescientific/gio/actions/workflows/build-docs.yml)
[![PyPI version](https://img.shields.io/pypi/v/gio.svg)](https://pypi.org/project/gio/)
[![PyPI versions](https://img.shields.io/pypi/pyversions/gio.svg)](https://pypi.org/project/gio/)
[![PyPI license](https://img.shields.io/pypi/l/gio.svg)](https://pypi.org/project/gio/)

**Geoscience I/O for grids and horizons.**

The goal of this project is to load and save various geoscience surface data formats (2D and 3D seismic horizons, grids, etc). The interchange formats are the `xarray.DataArray` (and `xarray.Dataset` where we need a collection of arrays). This format is convenient because it allows us to store a NumPy array with Pandas-like indexing (as opposed to ordinary NumPy positional indexing).

We've started with:

- OpendTect horizons
- ZMAP grids
- Surfer grids
- Petrel horizons

**What formats would you like to see? [Make an issue](https://github.com/agilescientific/gio/issues).**


## Installation

This library is on PyPI, so you can install it with:

    pip install gio

 To get the latest unstable release, you can install it from GitHub:

    python -m pip install --upgrade https://github.com/agilescientific/gio/archive/develop.zip


## Basic usage

In general, there's a reader for each supported file format. The reader produces an `xarray.DataArray`, or `xarray.Dataset` if the format supports multiple surfaces in one file.

```python
import gio

da = gio.read_surfer(fname)
da.plot()
```

There are currently no output functions; coming soon!


## Documentation

See [the documentation](https://code.agilescientific.com/gio) for more examples, and for help developing `gio` or making contributions back to this project.
