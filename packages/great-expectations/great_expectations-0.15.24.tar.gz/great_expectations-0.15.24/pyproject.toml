[build-system]
requires = ["setuptools", "wheel"]
# uncomment to enable pep517 after versioneer problem is fixed.
# https://github.com/python-versioneer/python-versioneer/issues/193
# build-backend = "setuptools.build_meta"

[tool.black]
extend_excludes = '''(docs/.*|tests/.*.fixture|.*.ge_store_backend_id)'''

[tool.isort]
profile = "black"
skip_gitignore = true
extend_skip_glob = ['venv/*', 'docs/*']

[tool.mypy]
files = [
    "great_expectations",
    # "contrib" # ignore entire `contrib` package
    ]
warn_unused_configs = true
ignore_missing_imports = true
# TODO: change this to 'normal' once we have 'full' type coverage
follow_imports = 'silent'
warn_redundant_casts = true
show_error_codes = true
exclude = [
    # If pattern should always be excluded add comment explaining why
    '_version\.py',  # generated by `versioneer`
    'v012',  # legacy code
    # #################################################################################
    # TODO: complete typing for the following modules and remove from exclude list
    # number is the current number of typing errors for the excluded pattern
    'checkpoint/types',  # 34
    'checkpoint/actions\.py',  # 18
    'checkpoint/checkpoint\.py',  # 26
    'checkpoint/configurator\.py', # 2
    'cli/upgrade_helpers',  # 76
    'cli/batch_request\.py',  # 11
    'cli/checkpoint\.py',  # 9
    'cli/cli\.py',  # 10
    'cli/datasource\.py',  # 12
    'cli/docs\.py',  # 1
    'cli/project\.py',  # 5
    'cli/toolkit\.py',  # 27
    'cli/store\.py',  # 2
    'cli/suite\.py',  # 24
    'cli/python_subprocess\.py', # 6
    'core/usage_statistics', # 108
    'core/expectation_diagnostics', # 20
    'core/batch\.py', # 29
    'core/expectation_configuration\.py', # 21
    'core/expectation_validation_result\.py', # 9
    'datasource/batch_kwargs_generator', # 16
    'datasource/data_connector', # 60
    'dataset/sparkdf_dataset\.py', # 3
    'dataset/sqlalchemy_dataset\.py', # 16
    'execution_engine/split_and_sample',  # 65
    'execution_engine/pandas_execution_engine\.py',  # 9
    'execution_engine/sparkdf_execution_engine\.py',  # 8
    'execution_engine/sqlalchemy_dialect.py', # 1
    'execution_engine/sqlalchemy_execution_engine\.py',  # 8
    'execution_engine/sqlalchemy_batch_data\.py',  # 1
    'execution_engine/execution_engine\.py',  # 7
    'render/renderer', # 78
    'render/view',  # 11
    'render/types',  # 4
    'expectations/expectation', # 188
    'rule_based_profiler/helpers', # 16
    'rule_based_profiler/config',  # 13
    'rule_based_profiler/data_assistant',  # 124
    'rule_based_profiler/domain_builder', # 62
    'rule_based_profiler/estimators',  # 23
    'rule_based_profiler/expectation_configuration_builder',  # 13
    'rule_based_profiler/parameter_builder',  # 161
    'rule_based_profiler/rule',  # 51
    'rule_based_profiler/attributed_resolved_metrics\.py',  # 4
    'rule_based_profiler/parameter_container\.py',  # 7
    'rule_based_profiler/builder\.py',  # 4
    'rule_based_profiler/domain\.py', # 4
    'validation_operators/types',  # 34
    'validation_operators/validation_operators\.py',  # 16
    'validator/exception_info\.py', # 1
    'validator/validation_graph\.py',  # 2
    'validator/validator\.py', # 54
    'util\.py', # 19
]

[tool.pytest.ini_options]
filterwarnings = [
    # This warning is common during testing where we intentionally use a COMPLETE format even in cases that would
    # be potentially overly resource intensive in standard operation
    "ignore:Setting result format to COMPLETE for a SqlAlchemyDataset:UserWarning",
    # This deprecation warning was fixed in moto release 1.3.15, and the filter should be removed once we migrate
    # to that minimum version
    "ignore:Using or importing the ABCs:DeprecationWarning:moto.cloudformation.parsing",
    # This deprecation warning comes from getsentry/responses, a mocking utility for requests. It is a dependency in moto.
    "ignore:stream argument is deprecated. Use stream parameter in request directly:DeprecationWarning",
]
junit_family="xunit2"
markers = [
    "base_data_context: mark test as being relevant to BaseDataContext, which will be removed during refactor",
    "cloud: mark test as being relevant to Great Expectations Cloud.",
    "docs: mark a test as a docs test.",
    "e2e: mark test as an E2E test.",
    "external_sqldialect: mark test as requiring install of an external sql dialect.",
    "integration: mark test as an integration test.",
    "slow: mark tests taking longer than 1 second.",
    "unit: mark a test as a unit test.",
    "v2_api: mark test as specific to the v2 api (e.g. pre Data Connectors)",
]
testpaths = "tests"
# use `pytest-mock` drop-in replacement for `unittest.mock`
# https://pytest-mock.readthedocs.io/en/latest/configuration.html#use-standalone-mock-package
mock_use_standalone_module = false
