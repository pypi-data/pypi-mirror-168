dataset:
  method: 'PhaseFromBF'
  # QLIPP or PhaseFromBF

  mode: '2D'
  # Mode for reconstruction, '2D' or '3D'

  data_dir: '/path/to/raw/data'
  # (str) path to the raw data directory (folder which holds .tif files) or the root .zarr file

  save_dir: '/path/to/save/directory'
  # (str) path to the directory in which the data will be saved

  data_save_name: 'Test_Data'
  # (str) Name of the zarr dataset that will be written.

  positions: 'all'
  # (str or list) Positions within the dataset that are to be analyzed.
  ##   'all'
  ##   [!!python/tuple [0, N]] for pos 0 through N
  ##   [0, 1, 5] for pos 0, 1, and 5
  ##   [!!python/tuple [0, 15], [19, 25]] for pos 0 through 15, 19, and 25

  timepoints: 'all'
  # (str or list) timepoints within the dataset that are to be analyzed.
  ##   'all'
  ##   [!!python/tuple [0, N]] for timepoint 0 through N
  ##   [0, 1, 5] for pos 0, 1, and 5
  ##   [!!python/tuple [0, 15], [19, 25]] for timepoints 0 through 15, 19, and 25

processing:
  output_channels: ['Phase2D', 'DAPI', 'GFP'] # or 'Phase3D'

  #    can also specify custom names of fluorescence channels 'GFP' or 'DAPI' or 'Nuclei'.
  #    The order in which fluor channels are listed corresponds to their order in
  #    the acquisition.  Specified name stored in the ome-zarr metadata.

  brightfield_channel_index: 0

  # index corresponding to the brightfield channel in the data (typically the order in which it was acquired)

  use_gpu: False
  # (bool) Option to use GPU processing if True (require cupy to be installed)

  gpu_id: 0
  # (int) ID of GPU to be used

  ########################################
  #    PHASE RECONSTRUCTION PARAMETERS   #
  ########################################

  wavelength: 532
  # (int) wavelength of the illumination in nm

  pixel_size: 6.5
  # (float) Camera pixel size in the unit of um

  magnification: 20
  # (float) Magnification of the objective

  NA_objective: 0.55
  # (float) Numerical aperture of the objective

  NA_condenser: 0.4
  # (float) Numerical aperture of the condenser

  n_objective_media: 1.0
  # (float) Refractive index of the objective immersion oil

  focus_zidx: 40
  # (int) Index of the focused z slice of the dataset for 2D phase reconstruction

  pad_z: 0
  # (int) Number of z slices padded above and below the dataset for 3D phase reconstruction to avoid boundary artifacts

  ## Denoiser parameters ##
  phase_denoiser_2D: 'Tikhonov'
    # (str) Options of denoiser for 2D phase reconstruction
    ##   'Tikhonov' or 'TV' (total variation)

  #### 2D Tikhonov parameter ####
  # if noise is higher raise the regularization parameter an order of magnitude to see if the recon is better

  Tik_reg_abs_2D: 1.0e-4
  # (float) Tikhonov regularization parameter for 2D absorption
  ##   1.0e-3 should work generally when noise is low

  Tik_reg_ph_2D: 1.0e-4
  # (float) Tikhonov regularization parameter for 2D phase
  ##   1.0e-3 should work generally when noise is low

  rho_2D: 1
  # (float) rho parameters in the 2D ADMM formulation
  ##   1 is generally good, no need to tune

  itr_2D: 50
  # (int) Number of iterations for 2D TV denoiser
  ##   50 is generally good, no need to tune

  TV_reg_abs_2D: 1.0e-4
  # (float) TV regularization parameter for 2D absorption
  ##   1e-4 is generally good

  TV_reg_ph_2D: 1.0e-4
  # (float) TV regularization parameter for 2D phase
  ##   1e-4 is generally good

  # -------- 3D ---------

  phase_denoiser_3D: 'Tikhonov'
  # (str) Options of denoiser for 3D phase reconstruction
  ##   'Tikhonov' or 'TV' (total variation)

  #### 3D Tikhonov parameters ####
  # if noise is higher raise an order of magnitude to see if the recon is better

  Tik_reg_ph_3D: 1.0e-4
  # (float) Tikhonov regularization parameter for 3D phase
  ##   1.0e-3 to 1.0e-4 should work generally when noise is low

  #### 3D TV parameters ####
  # For more noisy data, raise TV_reg to enforce stronger denoising effect

  rho_3D: 1.0e-3
  # (float) rho parameters in the 2D ADMM formulation
  ##   1.0e-3 is generally good, no need to tune

  itr_3D: 50
  # (int) Number of iterations for 3D TV denoiser
  ##   50 is generally good, no need to tune

  TV_reg_ph_3D: 5.0e-5
  # (float) TV regularization parameter for 3D phase
  ##   5.0e-5 is generally good

post_processing:
  denoise:
    use: False # set to true if you want to denoise the data before writing
    channels: ['Phase3D'] # Choose which channels to denoise.
    threshold: [0.1] # Must match length of channels
    level: [1] # must match length of channels

  deconvolution:
    use: False # set to true if you want to deconvolve raw fluorescence channels
    channels: [1, 2] # MUST BE IN NUMERICAL ORDER
                      # specify the index of fluorescent channels you wish to deconvolve in numerical order
    wavelength_nm: [488, 562] # specify the wavelengths of the fluorescence channel emissions (in same order as channels)
    regularization: [1e-4, 1e-4] # regularization parameters to use for each channel
    pixel_size_um: 6.5 # specify pixel size of the camera in um
    NA_obj: 0.4 # specify the numerical aperture of the objective
    magnification: 20 # effective magnification
    n_objective_media: 1.0 # specify the refractive index of objective immersion media (1.0 for air)
    pad_z: 0 # specify padding to eliminate potential boundary artifacts
    use_gpu: False
    gpu_id: 0

  registration:
    use: False # set to true if you want to register a channel before writing
    channel_idx: [3] # MUST BE IN NUMERICAL ORDER
                     # specify the index of fluorescent channels you wish to deconvolve in numerical order
    shift: [[0, 50, -50]] # up and to the right [0, +y, -x].  Must match length of channels